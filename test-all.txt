✔ |  OK F W S | Context
⠋ |   0   1   | ⠙ |   0 1 1   | ✖ |   0 1 1   |  [0.7 s]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-01_regmedint_class_ui.R:9: warning: (unknown)
package 'survival' was built under R version 3.6.2

test-01_regmedint_class_ui.R:16: error: (unknown)
could not find function "mutate"
1: describe("regmedint", {
       data(pbc)
       pbc_cc <- pbc[complete.cases(pbc), ] %>% mutate(male = if_else(sex == "m", 1L, 0L), status = if_else(status == 0, 0L, 
           1L))
       describe("regmedint mreg linear yreg linear", {
           it("runs witmh zero cvar with no interaction", {
               fit_regmedint <- regmedint(data = pbc_cc, yvar = "alk.phos", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, 
                   a1 = 2, m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "linear", interaction = FALSE, casecontrol = FALSE, 
                   eventvar = NULL)
           })
       })
       describe("regmedint mreg linear yreg logistic", {
           it("runs witmh zero cvar with no interaction", {
               fit_regmedint <- regmedint(data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, 
                   a1 = 2, m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "logistic", interaction = FALSE, casecontrol = FALSE, 
                   eventvar = NULL)
           })
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-01_regmedint_class_ui.R:16
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: pbc[complete.cases(pbc), ] %>% mutate(male = if_else(sex == "m", 1L, 0L), status = if_else(status == 0, 0L, 1L)) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-01_regmedint_class_ui.R:20
5: withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
6: eval(quote(`_fseq`(`_lhs`)), env, env)
7: eval(quote(`_fseq`(`_lhs`)), env, env)
8: `_fseq`(`_lhs`)
9: freduce(value, `_function_list`)
10: withVisible(function_list[[k]](value))
11: function_list[[k]](value)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 03_fit_mreg✔ |  24       | 03_fit_mreg
⠏ |   0       | 03_helpers_fit_mreg_fit_yreg✔ |  23       | 03_helpers_fit_mreg_fit_yreg
⠏ |   0       | 04_fit_yreg_linear✔ |  24       | 04_fit_yreg_linear
⠏ |   0       | 04_fit_yreg_logistic✔ |  24       | 04_fit_yreg_logistic
⠏ |   0       | 04_fit_yreg_poisson✔ |  24       | 04_fit_yreg_poisson
⠏ |   0       | 04_fit_yreg_survAFT_exp✔ |  24       | 04_fit_yreg_survAFT_exp
⠏ |   0       | 04_fit_yreg_survAFT_weibull✔ |  24       | 04_fit_yreg_survAFT_weibull
⠏ |   0       | 06_calc_myreg_helpers_coef⠧ |  38       | 06_calc_myreg_helpers_coef⠸ |  74       | 06_calc_myreg_helpers_coef✔ | 109       | 06_calc_myreg_helpers_coef [0.3 s]
⠏ |   0       | 06_calc_myreg_helpers_vcov⠇ |  29       | 06_calc_myreg_helpers_vcov⠹ |  53       | 06_calc_myreg_helpers_vcov⠦ |  77       | 06_calc_myreg_helpers_vcov⠋ | 101       | 06_calc_myreg_helpers_vcov✔ | 110       | 06_calc_myreg_helpers_vcov [0.4 s]
⠏ |   0       | 07_calc_myreg_mreg_linear_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_linear_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_linear.R:17: skip: calc_myreg_mreg_linear_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_linear_yreg_linear.R:26: skip: calc_myreg_mreg_linear_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_linear_yreg_logistic⠧ |   8       | 07_calc_myreg_mreg_linear_yreg_logistic⠋ |  11       | 07_calc_myreg_mreg_linear_yreg_logistic⠼ |  75       | 07_calc_myreg_mreg_linear_yreg_logistic⠧ | 158       | 07_calc_myreg_mreg_linear_yreg_logistic✖ | 176 3     | 07_calc_myreg_mreg_linear_yreg_logistic [0.5 s]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_logistic.R:925: failure: calc_myreg_mreg_linear_yreg_logistic_se (error handling): errors given inconsistent beta2 and theta4
`calc_myreg_mreg_linear_yreg_logistic_se(...)` did not throw an error.

test-07_calc_myreg_mreg_linear_yreg_logistic.R:951: failure: calc_myreg_mreg_linear_yreg_logistic_se (error handling): errors given inconsistent beta2 and theta4
`calc_myreg_mreg_linear_yreg_logistic_se(...)` did not throw an error.

test-07_calc_myreg_mreg_linear_yreg_logistic.R:922: error: (unknown)
dim(Sigma)[1] not equal to size_expected
1: describe("calc_myreg_mreg_linear_yreg_logistic_se function factory", {
       describe("calc_myreg_mreg_linear_yreg_logistic_se (error handling)", {
           it("errors given inconsistent beta2 and theta4", {
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 1:2, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7:8, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
           })
           it("errors given vector inputs in arguments other than beta2 and theta4", {
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1:2, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2:3, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4:5, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5:6, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6:7, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6:7, theta4 = 7, sigma_sq = 8:9, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
           })
           it("errors given NULL inputs in arguments other than beta2 and theta4", {
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = NULL, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = NULL, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = NULL, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = NULL, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = NULL, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = NULL, theta4 = 7, sigma_sq = 8:9, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
           })
       })
       describe("calc_myreg_mreg_linear_yreg_logistic_se (NULL cvar)", {
           se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, theta2 = 5, 
               theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 4, 
                   ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
           it("returns a function", {
               expect_equal(class(se_fun), "function")
           })
           it("returns a function that takes a0, a1, m_cde, and c_cond", {
               expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns a function with parameters in the enslosing environment", {
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), NULL)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), NULL)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
           })
           it("returns a function that errors given inconsistent c_cond", {
               expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
           })
           it("returns a function that gives a numeric vector without NA", {
               res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL)
               expect_true(is.vector(res))
               expect_true(is.numeric(res))
               expect_true(all(!is.na(res)))
           })
       })
       describe("calc_myreg_mreg_linear_yreg_logistic_se (one cvar)", {
           se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, theta2 = 5, 
               theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 5, 
                   ncol = 5), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
           it("returns a function", {
               expect_equal(class(se_fun), "function")
           })
           it("returns a function that takes a0, a1, m_cde, and c_cond", {
               expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns a function with parameters in the enslosing environment", {
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), 3)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), 7)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
           })
           it("returns a function that errors given inconsistent c_cond", {
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
               expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
           })
           it("returns a function that gives a numeric vector without NA", {
               res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1)
               expect_true(is.vector(res))
               expect_true(is.numeric(res))
               expect_true(all(!is.na(res)))
           })
       })
       describe("calc_myreg_mreg_linear_yreg_logistic_se (three cvar)", {
           se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3:5, theta0 = 0, theta1 = 4, theta2 = 5, 
               theta3 = 6, theta4 = 7:9, sigma_sq = 8, Sigma_beta = diag(1, nrow = 5, ncol = 5), Sigma_theta = diag(2, nrow = 7, 
                   ncol = 7), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
           it("returns a function", {
               expect_equal(class(se_fun), "function")
           })
           it("returns a function that takes a0, a1, m_cde, and c_cond", {
               expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns a function with parameters in the enslosing environment", {
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), 3:5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), 7:9)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
           })
           it("returns a function that errors given inconsistent c_cond", {
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
               expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
           })
           it("returns a function that gives a numeric vector without NA", {
               res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3)
               expect_true(is.vector(res))
               expect_true(is.numeric(res))
               expect_true(all(!is.na(res)))
           })
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:922
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: describe("calc_myreg_mreg_linear_yreg_logistic_se (NULL cvar)", {
       se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, theta2 = 5, 
           theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 4, 
               ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
       it("returns a function", {
           expect_equal(class(se_fun), "function")
       })
       it("returns a function that takes a0, a1, m_cde, and c_cond", {
           expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
       })
       it("returns a function with parameters in the enslosing environment", {
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), NULL)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), NULL)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
       })
       it("returns a function that errors given inconsistent c_cond", {
           expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
       })
       it("returns a function that gives a numeric vector without NA", {
           res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL)
           expect_true(is.vector(res))
           expect_true(is.numeric(res))
           expect_true(all(!is.na(res)))
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:1140
5: eval(substitute(code), describe_environment)
6: eval(substitute(code), describe_environment)
7: calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, theta2 = 5, theta3 = 6, 
       theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 4, ncol = 4), Sigma_sigma = diag(3, 
           nrow = 1, ncol = 1)) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:1141
8: assertthat::assert_that(dim(Sigma)[1] == size_expected) at /inv/kyoshida/cantos_stats/regmedint/R/07_calc_myreg_mreg_linear_yreg_logistic.R:213
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_linear.R:17: skip: calc_myreg_mreg_logistic_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_linear.R:26: skip: calc_myreg_mreg_logistic_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_logistic✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_logistic
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_logistic.R:17: skip: calc_myreg_mreg_logistic_yreg_logistic_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_logistic.R:26: skip: calc_myreg_mreg_logistic_yreg_logistic_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠹ |   0 1   2 | 07_calc_myreg_mreg_logistic_yreg_logistic✖ |   0 1   2 | 07_calc_myreg_mreg_logistic_yreg_logistic
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-08_regmedint_class_user_methods.R:12: error: (unknown)
!is.null(cvar) is not TRUE
1: describe("methods for regmedint", {
       data(pbc)
       pbc_cc <- pbc[complete.cases(pbc), ] %>% mutate(male = if_else(sex == "m", 1L, 0L), status = if_else(status == 0, 0L, 
           1L))
       describe("methods for regmedint mreg linear yreg linear", {
           fit_regmedint <- regmedint(data = pbc_cc, yvar = "alk.phos", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, a1 = 2, 
               m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "linear", interaction = FALSE, casecontrol = FALSE, eventvar = NULL)
           describe("print.regmedint", {
               it("prints results with expected elements", {
                   expect_output(print(fit_regmedint), "cde")
                   expect_output(print(fit_regmedint), "pnde")
                   expect_output(print(fit_regmedint), "tnie")
                   expect_output(print(fit_regmedint), "tnde")
                   expect_output(print(fit_regmedint), "pnie")
                   expect_output(print(fit_regmedint), "te")
                   expect_output(print(fit_regmedint), "pm")
               })
           })
           describe("summary.regmedint", {
               expect_output(summary(fit_regmedint), "cde")
               expect_output(summary(fit_regmedint), "pnde")
               expect_output(summary(fit_regmedint), "tnie")
               expect_output(summary(fit_regmedint), "tnde")
               expect_output(summary(fit_regmedint), "pnie")
               expect_output(summary(fit_regmedint), "te")
               expect_output(summary(fit_regmedint), "pm")
           })
           describe("coef.regmedint", {
               expect_output(coef(fit_regmedint), "cde")
               expect_output(coef(fit_regmedint), "pnde")
               expect_output(coef(fit_regmedint), "tnie")
               expect_output(coef(fit_regmedint), "tnde")
               expect_output(coef(fit_regmedint), "pnie")
               expect_output(coef(fit_regmedint), "te")
               expect_output(coef(fit_regmedint), "pm")
           })
           describe("confint.regmedint", {
               expect_output(confint(fit_regmedint), "cde")
               expect_output(confint(fit_regmedint), "pnde")
               expect_output(confint(fit_regmedint), "tnie")
               expect_output(confint(fit_regmedint), "tnde")
               expect_output(confint(fit_regmedint), "pnie")
               expect_output(confint(fit_regmedint), "te")
               expect_output(confint(fit_regmedint), "pm")
           })
       })
       describe("methods for regmedint mreg linear yreg logisitc", {
           fit_regmedint <- regmedint(data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, a1 = 2, 
               m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "logistic", interaction = FALSE, casecontrol = FALSE, eventvar = NULL)
           describe("print.regmedint", {
               it("prints results with expected elements", {
                   expect_output(print(fit_regmedint), "cde")
                   expect_output(print(fit_regmedint), "pnde")
                   expect_output(print(fit_regmedint), "tnie")
                   expect_output(print(fit_regmedint), "tnde")
                   expect_output(print(fit_regmedint), "pnie")
                   expect_output(print(fit_regmedint), "te")
                   expect_output(print(fit_regmedint), "pm")
               })
           })
           describe("summary.regmedint", {
               expect_output(summary(fit_regmedint), "cde")
               expect_output(summary(fit_regmedint), "pnde")
               expect_output(summary(fit_regmedint), "tnie")
               expect_output(summary(fit_regmedint), "tnde")
               expect_output(summary(fit_regmedint), "pnie")
               expect_output(summary(fit_regmedint), "te")
               expect_output(summary(fit_regmedint), "pm")
           })
           describe("coef.regmedint", {
               expect_output(coef(fit_regmedint), "cde")
               expect_output(coef(fit_regmedint), "pnde")
               expect_output(coef(fit_regmedint), "tnie")
               expect_output(coef(fit_regmedint), "tnde")
               expect_output(coef(fit_regmedint), "pnie")
               expect_output(coef(fit_regmedint), "te")
               expect_output(coef(fit_regmedint), "pm")
           })
           describe("confint.regmedint", {
               expect_output(confint(fit_regmedint), "cde")
               expect_output(confint(fit_regmedint), "pnde")
               expect_output(confint(fit_regmedint), "tnie")
               expect_output(confint(fit_regmedint), "tnde")
               expect_output(confint(fit_regmedint), "pnie")
               expect_output(confint(fit_regmedint), "te")
               expect_output(confint(fit_regmedint), "pm")
           })
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:12
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: describe("methods for regmedint mreg linear yreg linear", {
       fit_regmedint <- regmedint(data = pbc_cc, yvar = "alk.phos", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, a1 = 2, 
           m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "linear", interaction = FALSE, casecontrol = FALSE, eventvar = NULL)
       describe("print.regmedint", {
           it("prints results with expected elements", {
               expect_output(print(fit_regmedint), "cde")
               expect_output(print(fit_regmedint), "pnde")
               expect_output(print(fit_regmedint), "tnie")
               expect_output(print(fit_regmedint), "tnde")
               expect_output(print(fit_regmedint), "pnie")
               expect_output(print(fit_regmedint), "te")
               expect_output(print(fit_regmedint), "pm")
           })
       })
       describe("summary.regmedint", {
           expect_output(summary(fit_regmedint), "cde")
           expect_output(summary(fit_regmedint), "pnde")
           expect_output(summary(fit_regmedint), "tnie")
           expect_output(summary(fit_regmedint), "tnde")
           expect_output(summary(fit_regmedint), "pnie")
           expect_output(summary(fit_regmedint), "te")
           expect_output(summary(fit_regmedint), "pm")
       })
       describe("coef.regmedint", {
           expect_output(coef(fit_regmedint), "cde")
           expect_output(coef(fit_regmedint), "pnde")
           expect_output(coef(fit_regmedint), "tnie")
           expect_output(coef(fit_regmedint), "tnde")
           expect_output(coef(fit_regmedint), "pnie")
           expect_output(coef(fit_regmedint), "te")
           expect_output(coef(fit_regmedint), "pm")
       })
       describe("confint.regmedint", {
           expect_output(confint(fit_regmedint), "cde")
           expect_output(confint(fit_regmedint), "pnde")
           expect_output(confint(fit_regmedint), "tnie")
           expect_output(confint(fit_regmedint), "tnde")
           expect_output(confint(fit_regmedint), "pnie")
           expect_output(confint(fit_regmedint), "te")
           expect_output(confint(fit_regmedint), "pm")
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:21
5: eval(substitute(code), describe_environment)
6: eval(substitute(code), describe_environment)
7: regmedint(data = pbc_cc, yvar = "alk.phos", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, a1 = 2, m_cde = 0, c_cond = NULL, 
       mreg = "linear", yreg = "linear", interaction = FALSE, casecontrol = FALSE, eventvar = NULL) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:22
8: new_regmedint(data = data, yvar = yvar, avar = avar, mvar = mvar, cvar = cvar, a0 = a0, a1 = a1, m_cde = m_cde, c_cond = c_cond, 
       mreg = mreg, yreg = yreg, interaction = interaction, casecontrol = casecontrol, eventvar = eventvar) at /inv/kyoshida/cantos_stats/regmedint/R/01_regmedint_class_ui.R:81
9: calc_myreg(mreg = mreg, mreg_fit = mreg_fit, yreg = yreg, yreg_fit = yreg_fit, avar = avar, mvar = mvar, cvar = cvar, interaction = interaction) at /inv/kyoshida/cantos_stats/regmedint/R/02_regmedint_class_constructor.R:62
10: calc_myreg_mreg_linear_yreg_linear(mreg, mreg_fit, yreg, yreg_fit, avar, mvar, cvar, interaction) at /inv/kyoshida/cantos_stats/regmedint/R/05_calc_myreg_mediation_analysis.R:46
11: assertthat::assert_that(!is.null(cvar)) at /inv/kyoshida/cantos_stats/regmedint/R/07_calc_myreg_mreg_linear_yreg_linear.R:29
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

══ Results ═════════════════════════════════════════════════════════════════════════════════════════════════════════════
Duration: 3.2 s

OK:       562
Failed:   5
Warnings: 1
Skipped:  6
