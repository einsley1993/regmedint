✔ |  OK F W S | Context
⠋ |   0   1   | ⠏ |   0       | 01_regmedint_class_ui✔ |   0       | 01_regmedint_class_ui [0.1 s]
⠏ |   0       | 03_fit_mreg✔ |  24       | 03_fit_mreg
⠏ |   0       | 03_helpers_fit_mreg_fit_yreg✔ |  23       | 03_helpers_fit_mreg_fit_yreg
⠏ |   0       | 04_fit_yreg_linear✔ |  24       | 04_fit_yreg_linear
⠏ |   0       | 04_fit_yreg_logistic✔ |  24       | 04_fit_yreg_logistic
⠏ |   0       | 04_fit_yreg_poisson✔ |  24       | 04_fit_yreg_poisson
⠏ |   0       | 04_fit_yreg_survAFT_exp✔ |  24       | 04_fit_yreg_survAFT_exp
⠏ |   0       | 04_fit_yreg_survAFT_weibull✔ |  24       | 04_fit_yreg_survAFT_weibull
⠏ |   0       | 06_calc_myreg_helpers_coef⠦ |  37       | 06_calc_myreg_helpers_coef⠋ |  71       | 06_calc_myreg_helpers_coef⠇ | 109       | 06_calc_myreg_helpers_coef✔ | 109       | 06_calc_myreg_helpers_coef [0.3 s]
⠏ |   0       | 06_calc_myreg_helpers_vcov⠋ |  31       | 06_calc_myreg_helpers_vcov⠼ |  55       | 06_calc_myreg_helpers_vcov⠏ |  80       | 06_calc_myreg_helpers_vcov⠹ | 103       | 06_calc_myreg_helpers_vcov✔ | 110       | 06_calc_myreg_helpers_vcov [0.4 s]
⠏ |   0       | 07_calc_myreg_mreg_linear_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_linear_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_linear.R:17: skip: calc_myreg_mreg_linear_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_linear_yreg_linear.R:26: skip: calc_myreg_mreg_linear_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_linear_yreg_logistic⠋ |  61       | 07_calc_myreg_mreg_linear_yreg_logistic⠦ | 117       | 07_calc_myreg_mreg_linear_yreg_logistic✖ | 178 1     | 07_calc_myreg_mreg_linear_yreg_logistic [0.3 s]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_logistic.R:922: error: (unknown)
dim(Sigma_beta)[1] not equal to Sigma_beta_size
1: describe("calc_myreg_mreg_linear_yreg_logistic_se function factory", {
       describe("calc_myreg_mreg_linear_yreg_logistic_se (error handling)", {
           it("errors given inconsistent beta2 and theta4", {
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 1:2, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7:8, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
           })
           it("errors given vector inputs in arguments other than beta2 and theta4", {
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1:2, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2:3, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4:5, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5:6, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6:7, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6:7, theta4 = 7, sigma_sq = 8:9, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
           })
           it("errors given NULL inputs in arguments other than beta2 and theta4", {
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = NULL, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = NULL, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = NULL, 
                   theta2 = 5, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = NULL, theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = NULL, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
               expect_error(calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, 
                   theta2 = 5, theta3 = NULL, theta4 = 7, sigma_sq = 8:9, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, 
                     nrow = 4, ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1)))
           })
       })
       describe("calc_myreg_mreg_linear_yreg_logistic_se (NULL cvar)", {
           se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, theta2 = 5, 
               theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 4, 
                   ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
           it("returns a function", {
               expect_equal(class(se_fun), "function")
           })
           it("returns a function that takes a0, a1, m_cde, and c_cond", {
               expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns a function with parameters in the enslosing environment", {
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), NULL)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), NULL)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
           })
           it("returns a function that errors given inconsistent c_cond", {
               expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
           })
           it("returns a function that gives a numeric vector without NA", {
               res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL)
               expect_true(is.vector(res))
               expect_true(is.numeric(res))
               expect_true(all(!is.na(res)))
           })
       })
       describe("calc_myreg_mreg_linear_yreg_logistic_se (one cvar)", {
           se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3, theta0 = 0, theta1 = 4, theta2 = 5, 
               theta3 = 6, theta4 = 7, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 5, 
                   ncol = 5), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
           it("returns a function", {
               expect_equal(class(se_fun), "function")
           })
           it("returns a function that takes a0, a1, m_cde, and c_cond", {
               expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns a function with parameters in the enslosing environment", {
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), 3)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), 7)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
           })
           it("returns a function that errors given inconsistent c_cond", {
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
               expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
           })
           it("returns a function that gives a numeric vector without NA", {
               res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1)
               expect_true(is.vector(res))
               expect_true(is.numeric(res))
               expect_true(all(!is.na(res)))
           })
       })
       describe("calc_myreg_mreg_linear_yreg_logistic_se (three cvar)", {
           se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = 3:5, theta0 = 0, theta1 = 4, theta2 = 5, 
               theta3 = 6, theta4 = 7:9, sigma_sq = 8, Sigma_beta = diag(1, nrow = 5, ncol = 5), Sigma_theta = diag(2, nrow = 7, 
                   ncol = 7), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
           it("returns a function", {
               expect_equal(class(se_fun), "function")
           })
           it("returns a function that takes a0, a1, m_cde, and c_cond", {
               expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns a function with parameters in the enslosing environment", {
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), 3:5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), 7:9)
               expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
           })
           it("returns a function that errors given inconsistent c_cond", {
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
               expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
               expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
           })
           it("returns a function that gives a numeric vector without NA", {
               res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3)
               expect_true(is.vector(res))
               expect_true(is.numeric(res))
               expect_true(all(!is.na(res)))
           })
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:922
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: describe("calc_myreg_mreg_linear_yreg_logistic_se (NULL cvar)", {
       se_fun <- calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, theta2 = 5, 
           theta3 = 6, theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 4, 
               ncol = 4), Sigma_sigma = diag(3, nrow = 1, ncol = 1))
       it("returns a function", {
           expect_equal(class(se_fun), "function")
       })
       it("returns a function that takes a0, a1, m_cde, and c_cond", {
           expect_equal(names(formals(se_fun)), c("a0", "a1", "m_cde", "c_cond"))
       })
       it("returns a function with parameters in the enslosing environment", {
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta0"), 1)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta1"), 2)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "beta2"), NULL)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta0"), 0)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta1"), 4)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta2"), 5)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta3"), 6)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "theta4"), NULL)
           expect_equal(rlang::env_get(rlang::fn_env(se_fun), nm = "sigma_sq"), 8)
       })
       it("returns a function that errors given inconsistent c_cond", {
           expect_vector(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:2))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:3))
           expect_error(se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = 1:4))
       })
       it("returns a function that gives a numeric vector without NA", {
           res <- se_fun(a0 = 0, a1 = 1, m_cde = 0, c_cond = NULL)
           expect_true(is.vector(res))
           expect_true(is.numeric(res))
           expect_true(all(!is.na(res)))
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:1140
5: eval(substitute(code), describe_environment)
6: eval(substitute(code), describe_environment)
7: calc_myreg_mreg_linear_yreg_logistic_se(beta0 = 1, beta1 = 2, beta2 = NULL, theta0 = 0, theta1 = 4, theta2 = 5, theta3 = 6, 
       theta4 = NULL, sigma_sq = 8, Sigma_beta = diag(1, nrow = 3, ncol = 3), Sigma_theta = diag(2, nrow = 4, ncol = 4), Sigma_sigma = diag(3, 
           nrow = 1, ncol = 1)) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:1141
8: validate_myreg_vcovs(beta0 = beta0, beta1 = beta1, beta2 = beta2, theta0 = theta0, theta1 = theta1, theta2 = theta2, theta3 = theta3, 
       theta4 = theta4, sigma_sq = sigma_sq, Sigma_beta = Sigma_beta, Sigma_theta = Sigma_theta, Sigma_sigma_sq = Sigma_sigma_sq) at /inv/kyoshida/cantos_stats/regmedint/R/07_calc_myreg_mreg_linear_yreg_logistic.R:189
9: assertthat::assert_that(dim(Sigma_beta)[1] == Sigma_beta_size) at /inv/kyoshida/cantos_stats/regmedint/R/06_calc_myreg_helpers_coef.R:188
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_linear.R:17: skip: calc_myreg_mreg_logistic_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_linear.R:26: skip: calc_myreg_mreg_logistic_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_logistic✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_logistic
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_logistic.R:17: skip: calc_myreg_mreg_logistic_yreg_logistic_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_logistic.R:26: skip: calc_myreg_mreg_logistic_yreg_logistic_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 08_regmedint_class_user_methods✖ |   0 2     | 08_regmedint_class_user_methods
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-08_regmedint_class_user_methods.R:39: error: print.regmedint: prints results with expected elements
attempt to apply non-function
1: expect_output(print(fit_regmedint), "cde") at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:39
2: quasi_capture(enquo(object), label, capture_output, width = width)
3: .capture(act$val <- eval_bare(get_expr(.quo), get_env(.quo)), ...)
4: capture_output_lines(code, print, width = width)
5: eval_with_output(code, print = print, width = width)
6: withr::with_output_sink(temp, withVisible(code))
7: force(code)
8: withVisible(code)
9: eval_bare(get_expr(.quo), get_env(.quo))
10: print(fit_regmedint)
11: print.regmedint(fit_regmedint)

test-08_regmedint_class_user_methods.R:12: error: (unknown)
argument "object" is missing, with no default
1: describe("methods for regmedint", {
       data(pbc)
       pbc_cc <- pbc[complete.cases(pbc), ] %>% mutate(male = if_else(sex == "m", 1L, 0L), status = if_else(status == 0, 0L, 
           1L))
       describe("methods for regmedint mreg linear yreg linear", {
           fit_regmedint <- regmedint(data = pbc_cc, yvar = "alk.phos", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, a1 = 2, 
               m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "linear", interaction = FALSE, casecontrol = FALSE, eventvar = NULL)
           describe("print.regmedint", {
               it("prints results with expected elements", {
                   expect_output(print(fit_regmedint), "cde")
                   expect_output(print(fit_regmedint), "pnde")
                   expect_output(print(fit_regmedint), "tnie")
                   expect_output(print(fit_regmedint), "tnde")
                   expect_output(print(fit_regmedint), "pnie")
                   expect_output(print(fit_regmedint), "te")
                   expect_output(print(fit_regmedint), "pm")
               })
           })
           describe("summary.regmedint", {
               expect_output(summary(fit_regmedint), "cde")
               expect_output(summary(fit_regmedint), "pnde")
               expect_output(summary(fit_regmedint), "tnie")
               expect_output(summary(fit_regmedint), "tnde")
               expect_output(summary(fit_regmedint), "pnie")
               expect_output(summary(fit_regmedint), "te")
               expect_output(summary(fit_regmedint), "pm")
           })
           describe("coef.regmedint", {
               expect_output(coef(fit_regmedint), "cde")
               expect_output(coef(fit_regmedint), "pnde")
               expect_output(coef(fit_regmedint), "tnie")
               expect_output(coef(fit_regmedint), "tnde")
               expect_output(coef(fit_regmedint), "pnie")
               expect_output(coef(fit_regmedint), "te")
               expect_output(coef(fit_regmedint), "pm")
           })
           describe("confint.regmedint", {
               expect_output(confint(fit_regmedint), "cde")
               expect_output(confint(fit_regmedint), "pnde")
               expect_output(confint(fit_regmedint), "tnie")
               expect_output(confint(fit_regmedint), "tnde")
               expect_output(confint(fit_regmedint), "pnie")
               expect_output(confint(fit_regmedint), "te")
               expect_output(confint(fit_regmedint), "pm")
           })
       })
       describe("methods for regmedint mreg linear yreg logisitc", {
           fit_regmedint <- regmedint(data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, a1 = 2, 
               m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "logistic", interaction = FALSE, casecontrol = FALSE, eventvar = NULL)
           describe("print.regmedint", {
               it("prints results with expected elements", {
                   expect_output(print(fit_regmedint), "cde")
                   expect_output(print(fit_regmedint), "pnde")
                   expect_output(print(fit_regmedint), "tnie")
                   expect_output(print(fit_regmedint), "tnde")
                   expect_output(print(fit_regmedint), "pnie")
                   expect_output(print(fit_regmedint), "te")
                   expect_output(print(fit_regmedint), "pm")
               })
           })
           describe("summary.regmedint", {
               expect_output(summary(fit_regmedint), "cde")
               expect_output(summary(fit_regmedint), "pnde")
               expect_output(summary(fit_regmedint), "tnie")
               expect_output(summary(fit_regmedint), "tnde")
               expect_output(summary(fit_regmedint), "pnie")
               expect_output(summary(fit_regmedint), "te")
               expect_output(summary(fit_regmedint), "pm")
           })
           describe("coef.regmedint", {
               expect_output(coef(fit_regmedint), "cde")
               expect_output(coef(fit_regmedint), "pnde")
               expect_output(coef(fit_regmedint), "tnie")
               expect_output(coef(fit_regmedint), "tnde")
               expect_output(coef(fit_regmedint), "pnie")
               expect_output(coef(fit_regmedint), "te")
               expect_output(coef(fit_regmedint), "pm")
           })
           describe("confint.regmedint", {
               expect_output(confint(fit_regmedint), "cde")
               expect_output(confint(fit_regmedint), "pnde")
               expect_output(confint(fit_regmedint), "tnie")
               expect_output(confint(fit_regmedint), "tnde")
               expect_output(confint(fit_regmedint), "pnie")
               expect_output(confint(fit_regmedint), "te")
               expect_output(confint(fit_regmedint), "pm")
           })
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:12
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: describe("methods for regmedint mreg linear yreg linear", {
       fit_regmedint <- regmedint(data = pbc_cc, yvar = "alk.phos", avar = "trt", mvar = "bili", cvar = NULL, a0 = 1, a1 = 2, 
           m_cde = 0, c_cond = NULL, mreg = "linear", yreg = "linear", interaction = FALSE, casecontrol = FALSE, eventvar = NULL)
       describe("print.regmedint", {
           it("prints results with expected elements", {
               expect_output(print(fit_regmedint), "cde")
               expect_output(print(fit_regmedint), "pnde")
               expect_output(print(fit_regmedint), "tnie")
               expect_output(print(fit_regmedint), "tnde")
               expect_output(print(fit_regmedint), "pnie")
               expect_output(print(fit_regmedint), "te")
               expect_output(print(fit_regmedint), "pm")
           })
       })
       describe("summary.regmedint", {
           expect_output(summary(fit_regmedint), "cde")
           expect_output(summary(fit_regmedint), "pnde")
           expect_output(summary(fit_regmedint), "tnie")
           expect_output(summary(fit_regmedint), "tnde")
           expect_output(summary(fit_regmedint), "pnie")
           expect_output(summary(fit_regmedint), "te")
           expect_output(summary(fit_regmedint), "pm")
       })
       describe("coef.regmedint", {
           expect_output(coef(fit_regmedint), "cde")
           expect_output(coef(fit_regmedint), "pnde")
           expect_output(coef(fit_regmedint), "tnie")
           expect_output(coef(fit_regmedint), "tnde")
           expect_output(coef(fit_regmedint), "pnie")
           expect_output(coef(fit_regmedint), "te")
           expect_output(coef(fit_regmedint), "pm")
       })
       describe("confint.regmedint", {
           expect_output(confint(fit_regmedint), "cde")
           expect_output(confint(fit_regmedint), "pnde")
           expect_output(confint(fit_regmedint), "tnie")
           expect_output(confint(fit_regmedint), "tnde")
           expect_output(confint(fit_regmedint), "pnie")
           expect_output(confint(fit_regmedint), "te")
           expect_output(confint(fit_regmedint), "pm")
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:21
5: eval(substitute(code), describe_environment)
6: eval(substitute(code), describe_environment)
7: describe("summary.regmedint", {
       expect_output(summary(fit_regmedint), "cde")
       expect_output(summary(fit_regmedint), "pnde")
       expect_output(summary(fit_regmedint), "tnie")
       expect_output(summary(fit_regmedint), "tnde")
       expect_output(summary(fit_regmedint), "pnie")
       expect_output(summary(fit_regmedint), "te")
       expect_output(summary(fit_regmedint), "pm")
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:49
8: eval(substitute(code), describe_environment)
9: eval(substitute(code), describe_environment)
10: expect_output(summary(fit_regmedint), "cde") at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-08_regmedint_class_user_methods.R:50
...
15: withr::with_output_sink(temp, withVisible(code))
16: force(code)
17: withVisible(code)
18: eval_bare(get_expr(.quo), get_env(.quo))
19: summary(fit_regmedint)
20: summary.regmedint(fit_regmedint)
21: do.call(summary, c(x$mreg, args_mreg_fit)) at /inv/kyoshida/cantos_stats/regmedint/R/08_regmedint_class_user_methods.R:112
22: (function (object, ...) 
   UseMethod("summary"))(coefficients = c(`(Intercept)` = 2.21323529411765, trt = 0.743382352941175), residuals = c(`1` = 11.5433823529412, 
   `2` = -1.85661764705882, `3` = -1.55661764705882, `4` = -1.15661764705882, `5` = -0.299999999999999, `6` = -2.7, `7` = -3.4, 
   `8` = 0.243382352941176, `9` = 8.9, `10` = -2.3, `11` = -0.0999999999999993, `12` = -3, `13` = -2.15661764705882, `14` = -3, 
   `15` = -0.999999999999999, `16` = 8.44338235294118, `17` = -2.25661764705882, `18` = 1.4, `19` = -3.1, `20` = 0.443382352941176, 
   `21` = 13.7, `22` = -0.856617647058824, `23` = -3, `24` = 1.5, `25` = 17.9, `26` = 13.5, `27` = -3, `28` = -0.0999999999999993, 
   `29` = 1, `30` = -1.9, `31` = -2.9, `32` = -2.15661764705882, `33` = -2.5, `34` = -3.4, `35` = 4.14338235294117, `36` = -0.4, 
   `37` = -2.25661764705882, `38` = -1.85661764705882, `39` = -0.4, `40` = 2.74338235294118, `41` = -3.2, `42` = -1.8, `43` = -1.85661764705882, 
   `44` = -2.9, `45` = 3.04338235294118, `46` = -1.65661764705882, `47` = -1.15661764705882, `48` = -2.6, `49` = -0.656617647058825, 
   `50` = -2.15661764705882, `51` = -2.05661764705882, `52` = -3.1, `53` = -2.4, `54` = 18.8, `55` = -1.6, `56` = -1.75661764705882, 
   `57` = -1.55661764705882, `58` = -2.6, `59` = -2.25661764705882, `60` = 17.0433823529412, `61` = -2.5, `62` = -3.2, `63` = -3, 
   `64` = 5.44338235294118, `65` = 14.1433823529412, `66` = 9.24338235294117, `67` = 2.9, `68` = 3.34338235294118, `69` = -2.15661764705882, 
   `70` = 3.5, `71` = 11.4433823529412, `72` = 1.54338235294118, `73` = -1.65661764705882, `74` = -3.3, `75` = -1.6, `76` = 2.04338235294118, 
   `77` = -1.85661764705882, `78` = -3.1, `79` = -0.956617647058824, `80` = -1.35661764705882, `81` = 1.3, `82` = -1.55661764705882, 
   `83` = -1.65661764705882, `84` = 0.243382352941176, `85` = -1.7, `86` = -1.95661764705882, `87` = -1.9, `88` = -1.4, `89` = -2.8, 
   `90` = -2.05661764705882, `91` = -1.2, `92` = -1.85661764705882, `93` = -2.6, `94` = -3.1, `95` = -2.55661764705882, `96` = -3.2, 
   `97` = -1.05661764705882, `98` = 2.54338235294118, `99` = -1.7, `100` = 3.74338235294118, `101` = -0.499999999999999, `102` = -3, 
   `103` = 0.0433823529411757, `104` = 3.54338235294118, `105` = 0.543382352941176, `106` = -2.35661764705882, `107` = 0.543382352941176, 
   `108` = -2.4, `109` = -2.35661764705882, `110` = -2.35661764705882, `111` = -2.4, `112` = -3.2, `113` = 13.7, `114` = -0.899999999999999, 
   `115` = -1.05661764705882, `116` = -2.2, `117` = -3, `118` = -2.55661764705882, `119` = -2.15661764705882, `120` = -1.85661764705882, 
   `121` = 4.34338235294118, `122` = -2.6, `123` = -1.85661764705882, `124` = -2.05661764705882, `125` = -2.7, `126` = -0.799999999999999, 
   `127` = 24.3, `128` = -3, `129` = -1.75661764705882, `130` = 3.5, `131` = 0.0433823529411757, `132` = -2.05661764705882, 
   `133` = -0.656617647058825, `134` = -2.45661764705882, `135` = -0.556617647058824, `136` = -3.1, `137` = 21.8, `138` = -3.1, 
   `139` = 0.443382352941176, `140` = -1.2, `141` = -3.1, `142` = -1.4, `143` = -0.499999999999999, `144` = -2.65661764705882, 
   `145` = 1.04338235294118, `146` = 2, `147` = -2.05661764705882, `148` = -2.4, `149` = -1.75661764705882, `150` = -2.4, `151` = 0.0433823529411757, 
   `152` = -2.9, `153` = -2.8, `154` = -1.9, `155` = 1, `156` = -1.55661764705882, `157` = -3.2, `158` = 7.3, `159` = -2.15661764705882, 
   `160` = -0.956617647058824, `161` = 10.3, `162` = -2.25661764705882, `163` = -2.4, `164` = 20.8, `165` = -2.05661764705882, 
   `166` = 7.1, `167` = -1.45661764705882, `168` = 0.743382352941176, `169` = -1.55661764705882, `170` = -2.35661764705882, 
   `171` = -3, `172` = -0.856617647058824, `173` = 1, `174` = -3.1, `175` = -2.45661764705882, `176` = -3.2, `177` = -3, `178` = -2.35661764705882, 
   `179` = 0.943382352941176, `180` = -3, `181` = -2.8, `182` = -2.5, `183` = -2.45661764705882, `184` = -2.8, `185` = 2.2, 
   `186` = 7.7, `187` = -2.1, `188` = 0.843382352941175, `189` = -2.8, `190` = 0.800000000000001, `191` = 11.1433823529412, 
   `192` = -1.95661764705882, `193` = -2.25661764705882, `194` = -3.2, `195` = -0.656617647058825, `196` = -3, `197` = 1.54338235294118, 
   `198` = -0.4, `199` = -0.299999999999999, `200` = -2.55661764705882, `201` = -2.05661764705882, `202` = -2.8, `203` = 9.3, 
   `204` = -1.45661764705882, `205` = -1.35661764705882, `206` = -2.15661764705882, `207` = -2.55661764705882, `208` = 0.700000000000001, 
   `209` = -1.05661764705882, `210` = 4.3, `211` = 0.943382352941176, `212` = -3.1, `213` = -0.856617647058824, `214` = 3.14338235294118, 
   `215` = -2.9, `216` = -1.65661764705882, `217` = -3.1, `218` = -2.45661764705882, `219` = -1.85661764705882, `220` = 4.14338235294117, 
   `221` = 0.143382352941176, `222` = -3, `223` = -1.85661764705882, `224` = -2.45661764705882, `225` = -1.85661764705882, `226` = -0.599999999999999, 
   `227` = 1.9, `228` = -0.899999999999999, `229` = -2.6, `230` = -0.299999999999999, `231` = -0.199999999999999, `232` = -2.45661764705882, 
   `233` = 3.64338235294118, `234` = 3.44338235294118, `235` = -0.0999999999999993, `236` = -1.95661764705882, `237` = -2.7, 
   `238` = -2.45661764705882, `239` = -1.5, `240` = -0.756617647058824, `241` = -1.95661764705882, `242` = -2.7, `243` = 1.9, 
   `244` = -3.2, `245` = -1.35661764705882, `246` = 14.9433823529412, `247` = -2.4, `248` = -2.6, `249` = -2.4, `250` = -2.15661764705882, 
   `251` = -0.956617647058824, `252` = 3.44338235294118, `253` = 5, `254` = 1.04338235294118, `255` = -1.55661764705882, `256` = 0.243382352941176, 
   `257` = 4.9, `258` = 4.8, `259` = 3.64338235294118, `260` = -0.556617647058824, `261` = -2.9, `262` = -1.75661764705882, 
   `263` = -2.6, `264` = -0.556617647058824, `265` = -2.7, `266` = -2.25661764705882, `267` = -2.7, `268` = -2.45661764705882, 
   `269` = -0.799999999999999, `270` = -3.1, `271` = -2.9, `272` = -2.55661764705882, `273` = -3.3, `274` = -1.25661764705882, 
   `275` = -0.956617647058824, `276` = 2.7), effects = c(`(Intercept)` = -55.3835117121081, trt = 6.17434906019536, -2.07517780836127, 
   -1.67517780836127, -1.10452800189898, -3.50452800189898, -4.20452800189898, -0.275177808361274, 8.09547199810102, -3.10452800189898, 
   -0.904528001898976, -3.80452800189898, -2.67517780836127, -3.80452800189898, -1.80452800189898, 7.92482219163873, -2.77517780836127, 
   0.595471998101024, -3.90452800189898, -0.075177808361274, 12.895471998101, -1.37517780836127, -3.80452800189898, 0.695471998101024, 
   17.095471998101, 12.695471998101, -3.80452800189898, -0.904528001898976, 0.195471998101024, -2.70452800189898, -3.70452800189898, 
   -2.67517780836127, -3.30452800189898, -4.20452800189898, 3.62482219163873, -1.20452800189898, -2.77517780836127, -2.37517780836127, 
   -1.20452800189898, 2.22482219163873, -4.00452800189898, -2.60452800189898, -2.37517780836127, -3.70452800189898, 2.52482219163873, 
   -2.17517780836127, -1.67517780836127, -3.40452800189898, -1.17517780836127, -2.67517780836127, -2.57517780836127, -3.90452800189898, 
   -3.20452800189898, 17.995471998101, -2.40452800189898, -2.27517780836127, -2.07517780836127, -3.40452800189898, -2.77517780836127, 
   16.5248221916387, -3.30452800189898, -4.00452800189898, -3.80452800189898, 4.92482219163873, 13.6248221916387, 8.72482219163872, 
   2.09547199810102, 2.82482219163873, -2.67517780836127, 2.69547199810102, 10.9248221916387, 1.02482219163873, -2.17517780836127, 
   -4.10452800189898, -2.40452800189898, 1.52482219163873, -2.37517780836127, -3.90452800189898, -1.47517780836127, -1.87517780836127, 
   0.495471998101024, -2.07517780836127, -2.17517780836127, -0.275177808361274, -2.50452800189898, -2.47517780836127, -2.70452800189898, 
   -2.20452800189898, -3.60452800189898, -2.57517780836127, -2.00452800189898, -2.37517780836127, -3.40452800189898, -3.90452800189898, 
   -3.07517780836127, -4.00452800189898, -1.57517780836127, 2.02482219163873, -2.50452800189898, 3.22482219163873, -1.30452800189898, 
   -3.80452800189898, -0.475177808361274, 3.02482219163873, 0.0248221916387261, -2.87517780836127, 0.0248221916387261, -3.20452800189898, 
   -2.87517780836127, -2.87517780836127, -3.20452800189898, -4.00452800189898, 12.895471998101, -1.70452800189898, -1.57517780836127, 
   -3.00452800189898, -3.80452800189898, -3.07517780836127, -2.67517780836127, -2.37517780836127, 3.82482219163873, -3.40452800189898, 
   -2.37517780836127, -2.57517780836127, -3.50452800189898, -1.60452800189898, 23.495471998101, -3.80452800189898, -2.27517780836127, 
   2.69547199810102, -0.475177808361274, -2.57517780836127, -1.17517780836127, -2.97517780836127, -1.07517780836127, -3.90452800189898, 
   20.995471998101, -3.90452800189898, -0.075177808361274, -2.00452800189898, -3.90452800189898, -2.20452800189898, -1.30452800189898, 
   -3.17517780836127, 0.524822191638726, 1.19547199810102, -2.57517780836127, -3.20452800189898, -2.27517780836127, -3.20452800189898, 
   -0.475177808361274, -3.70452800189898, -3.60452800189898, -2.70452800189898, 0.195471998101024, -2.07517780836127, -4.00452800189898, 
   6.49547199810102, -2.67517780836127, -1.47517780836127, 9.49547199810102, -2.77517780836127, -3.20452800189898, 19.995471998101, 
   -2.57517780836127, 6.29547199810102, -1.97517780836127, 0.224822191638726, -2.07517780836127, -2.87517780836127, -3.80452800189898, 
   -1.37517780836127, 0.195471998101024, -3.90452800189898, -2.97517780836127, -4.00452800189898, -3.80452800189898, -2.87517780836127, 
   0.424822191638726, -3.80452800189898, -3.60452800189898, -3.30452800189898, -2.97517780836127, -3.60452800189898, 1.39547199810102, 
   6.89547199810102, -2.90452800189898, 0.324822191638726, -3.60452800189898, -0.00452800189897591, 10.6248221916387, -2.47517780836127, 
   -2.77517780836127, -4.00452800189898, -1.17517780836127, -3.80452800189898, 1.02482219163873, -1.20452800189898, -1.10452800189898, 
   -3.07517780836127, -2.57517780836127, -3.60452800189898, 8.49547199810102, -1.97517780836127, -1.87517780836127, -2.67517780836127, 
   -3.07517780836127, -0.104528001898976, -1.57517780836127, 3.49547199810102, 0.424822191638726, -3.90452800189898, -1.37517780836127, 
   2.62482219163873, -3.70452800189898, -2.17517780836127, -3.90452800189898, -2.97517780836127, -2.37517780836127, 3.62482219163873, 
   -0.375177808361274, -3.80452800189898, -2.37517780836127, -2.97517780836127, -2.37517780836127, -1.40452800189898, 1.09547199810102, 
   -1.70452800189898, -3.40452800189898, -1.10452800189898, -1.00452800189898, -2.97517780836127, 3.12482219163873, 2.92482219163873, 
   -0.904528001898976, -2.47517780836127, -3.50452800189898, -2.97517780836127, -2.30452800189898, -1.27517780836127, -2.47517780836127, 
   -3.50452800189898, 1.09547199810102, -4.00452800189898, -1.87517780836127, 14.4248221916387, -3.20452800189898, -3.40452800189898, 
   -3.20452800189898, -2.67517780836127, -1.47517780836127, 2.92482219163873, 4.19547199810102, 0.524822191638726, -2.07517780836127, 
   -0.275177808361274, 4.09547199810102, 3.99547199810102, 3.12482219163873, -1.07517780836127, -3.70452800189898, -2.27517780836127, 
   -3.40452800189898, -1.07517780836127, -3.50452800189898, -2.77517780836127, -3.50452800189898, -2.97517780836127, -1.60452800189898, 
   -3.90452800189898, -3.70452800189898, -3.07517780836127, -4.10452800189898, -1.77517780836127, -1.47517780836127, 1.89547199810102
   ), rank = 2L, fitted.values = c(`1` = 2.95661764705883, `2` = 2.95661764705882, `3` = 2.95661764705882, `4` = 2.95661764705882, 
   `5` = 3.7, `6` = 3.7, `7` = 3.7, `8` = 2.95661764705882, `9` = 3.7, `10` = 3.7, `11` = 3.7, `12` = 3.7, `13` = 2.95661764705882, 
   `14` = 3.7, `15` = 3.7, `16` = 2.95661764705882, `17` = 2.95661764705882, `18` = 3.7, `19` = 3.7, `20` = 2.95661764705882, 
   `21` = 3.7, `22` = 2.95661764705882, `23` = 3.7, `24` = 3.7, `25` = 3.7, `26` = 3.7, `27` = 3.7, `28` = 3.7, `29` = 3.7, 
   `30` = 3.7, `31` = 3.7, `32` = 2.95661764705882, `33` = 3.7, `34` = 3.7, `35` = 2.95661764705882, `36` = 3.7, `37` = 2.95661764705882, 
   `38` = 2.95661764705882, `39` = 3.7, `40` = 2.95661764705882, `41` = 3.7, `42` = 3.7, `43` = 2.95661764705882, `44` = 3.7, 
   `45` = 2.95661764705882, `46` = 2.95661764705882, `47` = 2.95661764705882, `48` = 3.7, `49` = 2.95661764705882, `50` = 2.95661764705882, 
   `51` = 2.95661764705882, `52` = 3.7, `53` = 3.7, `54` = 3.7, `55` = 3.7, `56` = 2.95661764705882, `57` = 2.95661764705882, 
   `58` = 3.7, `59` = 2.95661764705882, `60` = 2.95661764705882, `61` = 3.7, `62` = 3.7, `63` = 3.7, `64` = 2.95661764705882, 
   `65` = 2.95661764705883, `66` = 2.95661764705883, `67` = 3.7, `68` = 2.95661764705882, `69` = 2.95661764705882, `70` = 3.7, 
   `71` = 2.95661764705883, `72` = 2.95661764705882, `73` = 2.95661764705882, `74` = 3.7, `75` = 3.7, `76` = 2.95661764705882, 
   `77` = 2.95661764705882, `78` = 3.7, `79` = 2.95661764705882, `80` = 2.95661764705882, `81` = 3.7, `82` = 2.95661764705882, 
   `83` = 2.95661764705882, `84` = 2.95661764705882, `85` = 3.7, `86` = 2.95661764705882, `87` = 3.7, `88` = 3.7, `89` = 3.7, 
   `90` = 2.95661764705882, `91` = 3.7, `92` = 2.95661764705882, `93` = 3.7, `94` = 3.7, `95` = 2.95661764705882, `96` = 3.7, 
   `97` = 2.95661764705882, `98` = 2.95661764705882, `99` = 3.7, `100` = 2.95661764705882, `101` = 3.7, `102` = 3.7, `103` = 2.95661764705882, 
   `104` = 2.95661764705882, `105` = 2.95661764705882, `106` = 2.95661764705882, `107` = 2.95661764705882, `108` = 3.7, `109` = 2.95661764705882, 
   `110` = 2.95661764705882, `111` = 3.7, `112` = 3.7, `113` = 3.7, `114` = 3.7, `115` = 2.95661764705882, `116` = 3.7, `117` = 3.7, 
   `118` = 2.95661764705882, `119` = 2.95661764705882, `120` = 2.95661764705882, `121` = 2.95661764705882, `122` = 3.7, `123` = 2.95661764705882, 
   `124` = 2.95661764705882, `125` = 3.7, `126` = 3.7, `127` = 3.7, `128` = 3.7, `129` = 2.95661764705882, `130` = 3.7, `131` = 2.95661764705882, 
   `132` = 2.95661764705882, `133` = 2.95661764705882, `134` = 2.95661764705882, `135` = 2.95661764705882, `136` = 3.7, `137` = 3.7, 
   `138` = 3.7, `139` = 2.95661764705882, `140` = 3.7, `141` = 3.7, `142` = 3.7, `143` = 3.7, `144` = 2.95661764705882, `145` = 2.95661764705882, 
   `146` = 3.7, `147` = 2.95661764705882, `148` = 3.7, `149` = 2.95661764705882, `150` = 3.7, `151` = 2.95661764705882, `152` = 3.7, 
   `153` = 3.7, `154` = 3.7, `155` = 3.7, `156` = 2.95661764705882, `157` = 3.7, `158` = 3.7, `159` = 2.95661764705882, `160` = 2.95661764705882, 
   `161` = 3.7, `162` = 2.95661764705882, `163` = 3.7, `164` = 3.7, `165` = 2.95661764705882, `166` = 3.7, `167` = 2.95661764705882, 
   `168` = 2.95661764705882, `169` = 2.95661764705882, `170` = 2.95661764705882, `171` = 3.7, `172` = 2.95661764705882, `173` = 3.7, 
   `174` = 3.7, `175` = 2.95661764705882, `176` = 3.7, `177` = 3.7, `178` = 2.95661764705882, `179` = 2.95661764705882, `180` = 3.7, 
   `181` = 3.7, `182` = 3.7, `183` = 2.95661764705882, `184` = 3.7, `185` = 3.7, `186` = 3.7, `187` = 3.7, `188` = 2.95661764705882, 
   `189` = 3.7, `190` = 3.7, `191` = 2.95661764705883, `192` = 2.95661764705882, `193` = 2.95661764705882, `194` = 3.7, `195` = 2.95661764705882, 
   `196` = 3.7, `197` = 2.95661764705882, `198` = 3.7, `199` = 3.7, `200` = 2.95661764705882, `201` = 2.95661764705882, `202` = 3.7, 
   `203` = 3.7, `204` = 2.95661764705882, `205` = 2.95661764705882, `206` = 2.95661764705882, `207` = 2.95661764705882, `208` = 3.7, 
   `209` = 2.95661764705882, `210` = 3.7, `211` = 2.95661764705882, `212` = 3.7, `213` = 2.95661764705882, `214` = 2.95661764705882, 
   `215` = 3.7, `216` = 2.95661764705882, `217` = 3.7, `218` = 2.95661764705882, `219` = 2.95661764705882, `220` = 2.95661764705882, 
   `221` = 2.95661764705882, `222` = 3.7, `223` = 2.95661764705882, `224` = 2.95661764705882, `225` = 2.95661764705882, `226` = 3.7, 
   `227` = 3.7, `228` = 3.7, `229` = 3.7, `230` = 3.7, `231` = 3.7, `232` = 2.95661764705882, `233` = 2.95661764705882, `234` = 2.95661764705882, 
   `235` = 3.7, `236` = 2.95661764705882, `237` = 3.7, `238` = 2.95661764705882, `239` = 3.7, `240` = 2.95661764705882, `241` = 2.95661764705882, 
   `242` = 3.7, `243` = 3.7, `244` = 3.7, `245` = 2.95661764705882, `246` = 2.95661764705883, `247` = 3.7, `248` = 3.7, `249` = 3.7, 
   `250` = 2.95661764705882, `251` = 2.95661764705882, `252` = 2.95661764705882, `253` = 3.7, `254` = 2.95661764705882, `255` = 2.95661764705882, 
   `256` = 2.95661764705882, `257` = 3.7, `258` = 3.7, `259` = 2.95661764705882, `260` = 2.95661764705882, `261` = 3.7, `262` = 2.95661764705882, 
   `263` = 3.7, `264` = 2.95661764705882, `265` = 3.7, `266` = 2.95661764705882, `267` = 3.7, `268` = 2.95661764705882, `269` = 3.7, 
   `270` = 3.7, `271` = 3.7, `272` = 2.95661764705882, `273` = 3.7, `274` = 2.95661764705882, `275` = 2.95661764705882, `276` = 3.7
   ), assign = 0:1, qr = structure(list(qr = structure(c(-16.6132477258361, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, -25.04025744184, 
   8.30575145585135, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532), .Dim = c(276L, 2L), .Dimnames = list(
       c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", 
       "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", 
       "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", 
       "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", 
       "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", 
       "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", 
       "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131", "132", "133", "134", "135", 
       "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "150", "151", "152", 
       "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", 
       "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", 
       "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", "203", 
       "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", 
       "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", 
       "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", 
       "255", "256", "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", "271", 
       "272", "273", "274", "275", "276"), c("(Intercept)", "trt")), assign = 0:1), qraux = c(1.06019292654288, 1.05760432875213
   ), pivot = 1:2, tol = 0.0000001, rank = 2L), class = "qr"), df.residual = 274L, xlevels = structure(list(), .Names = character(0)), 
       call = lm(formula = bili ~ trt, data = data), terms = bili ~ trt, model = structure(list(bili = c(14.5, 1.1, 1.4, 1.8, 
       3.4, 1, 0.3, 3.2, 12.6, 1.4, 3.6, 0.7, 0.8, 0.7, 2.7, 11.4, 0.7, 5.1, 0.6, 3.4, 17.4, 2.1, 0.7, 5.2, 21.6, 17.2, 0.7, 
       3.6, 4.7, 1.8, 0.8, 0.8, 1.2, 0.3, 7.1, 3.3, 0.7, 1.1, 3.3, 5.7, 0.5, 1.9, 1.1, 0.8, 6, 1.3, 1.8, 1.1, 2.3, 0.8, 0.9, 
       0.6, 1.3, 22.5, 2.1, 1.2, 1.4, 1.1, 0.7, 20, 1.2, 0.5, 0.7, 8.4, 17.1, 12.2, 6.6, 6.3, 0.8, 7.2, 14.4, 4.5, 1.3, 0.4, 
       2.1, 5, 1.1, 0.6, 2, 1.6, 5, 1.4, 1.3, 3.2, 2, 1, 1.8, 2.3, 0.9, 0.9, 2.5, 1.1, 1.1, 0.6, 0.4, 0.5, 1.9, 5.5, 2, 6.7, 
       3.2, 0.7, 3, 6.5, 3.5, 0.6, 3.5, 1.3, 0.6, 0.6, 1.3, 0.5, 17.4, 2.8, 1.9, 1.5, 0.7, 0.4, 0.8, 1.1, 7.3, 1.1, 1.1, 0.9, 
       1, 2.9, 28, 0.7, 1.2, 7.2, 3, 0.9, 2.3, 0.5, 2.4, 0.6, 25.5, 0.6, 3.4, 2.5, 0.6, 2.3, 3.2, 0.3, 4, 5.7, 0.9, 1.3, 1.2, 
       1.3, 3, 0.8, 0.9, 1.8, 4.7, 1.4, 0.5, 11, 0.8, 2, 14, 0.7, 1.3, 24.5, 0.9, 10.8, 1.5, 3.7, 1.4, 0.6, 0.7, 2.1, 4.7, 0.6, 
       0.5, 0.5, 0.7, 0.6, 3.9, 0.7, 0.9, 1.2, 0.5, 0.9, 5.9, 11.4, 1.6, 3.8, 0.9, 4.5, 14.1, 1, 0.7, 0.5, 2.3, 0.7, 4.5, 3.3, 
       3.4, 0.4, 0.9, 0.9, 13, 1.5, 1.6, 0.8, 0.4, 4.4, 1.9, 8, 3.9, 0.6, 2.1, 6.1, 0.8, 1.3, 0.6, 0.5, 1.1, 7.1, 3.1, 0.7, 
       1.1, 0.5, 1.1, 3.1, 5.6, 2.8, 1.1, 3.4, 3.5, 0.5, 6.6, 6.4, 3.6, 1, 1, 0.5, 2.2, 2.2, 1, 1, 5.6, 0.5, 1.6, 17.9, 1.3, 
       1.1, 1.3, 0.8, 2, 6.4, 8.7, 4, 1.4, 3.2, 8.6, 8.5, 6.6, 2.4, 0.8, 1.2, 1.1, 2.4, 1, 0.7, 1, 0.5, 2.9, 0.6, 0.8, 0.4, 
       0.4, 1.7, 2, 6.4), trt = c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 2L, 
       2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 
       2L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 
       1L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 
       2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 
       1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 
       2L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 
       1L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 
       1L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 
       1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 2L)), terms = bili ~ trt, row.names = c(NA, 276L), class = "data.frame"))
23: summary.default(coefficients = c(`(Intercept)` = 2.21323529411765, trt = 0.743382352941175), residuals = c(`1` = 11.5433823529412, 
   `2` = -1.85661764705882, `3` = -1.55661764705882, `4` = -1.15661764705882, `5` = -0.299999999999999, `6` = -2.7, `7` = -3.4, 
   `8` = 0.243382352941176, `9` = 8.9, `10` = -2.3, `11` = -0.0999999999999993, `12` = -3, `13` = -2.15661764705882, `14` = -3, 
   `15` = -0.999999999999999, `16` = 8.44338235294118, `17` = -2.25661764705882, `18` = 1.4, `19` = -3.1, `20` = 0.443382352941176, 
   `21` = 13.7, `22` = -0.856617647058824, `23` = -3, `24` = 1.5, `25` = 17.9, `26` = 13.5, `27` = -3, `28` = -0.0999999999999993, 
   `29` = 1, `30` = -1.9, `31` = -2.9, `32` = -2.15661764705882, `33` = -2.5, `34` = -3.4, `35` = 4.14338235294117, `36` = -0.4, 
   `37` = -2.25661764705882, `38` = -1.85661764705882, `39` = -0.4, `40` = 2.74338235294118, `41` = -3.2, `42` = -1.8, `43` = -1.85661764705882, 
   `44` = -2.9, `45` = 3.04338235294118, `46` = -1.65661764705882, `47` = -1.15661764705882, `48` = -2.6, `49` = -0.656617647058825, 
   `50` = -2.15661764705882, `51` = -2.05661764705882, `52` = -3.1, `53` = -2.4, `54` = 18.8, `55` = -1.6, `56` = -1.75661764705882, 
   `57` = -1.55661764705882, `58` = -2.6, `59` = -2.25661764705882, `60` = 17.0433823529412, `61` = -2.5, `62` = -3.2, `63` = -3, 
   `64` = 5.44338235294118, `65` = 14.1433823529412, `66` = 9.24338235294117, `67` = 2.9, `68` = 3.34338235294118, `69` = -2.15661764705882, 
   `70` = 3.5, `71` = 11.4433823529412, `72` = 1.54338235294118, `73` = -1.65661764705882, `74` = -3.3, `75` = -1.6, `76` = 2.04338235294118, 
   `77` = -1.85661764705882, `78` = -3.1, `79` = -0.956617647058824, `80` = -1.35661764705882, `81` = 1.3, `82` = -1.55661764705882, 
   `83` = -1.65661764705882, `84` = 0.243382352941176, `85` = -1.7, `86` = -1.95661764705882, `87` = -1.9, `88` = -1.4, `89` = -2.8, 
   `90` = -2.05661764705882, `91` = -1.2, `92` = -1.85661764705882, `93` = -2.6, `94` = -3.1, `95` = -2.55661764705882, `96` = -3.2, 
   `97` = -1.05661764705882, `98` = 2.54338235294118, `99` = -1.7, `100` = 3.74338235294118, `101` = -0.499999999999999, `102` = -3, 
   `103` = 0.0433823529411757, `104` = 3.54338235294118, `105` = 0.543382352941176, `106` = -2.35661764705882, `107` = 0.543382352941176, 
   `108` = -2.4, `109` = -2.35661764705882, `110` = -2.35661764705882, `111` = -2.4, `112` = -3.2, `113` = 13.7, `114` = -0.899999999999999, 
   `115` = -1.05661764705882, `116` = -2.2, `117` = -3, `118` = -2.55661764705882, `119` = -2.15661764705882, `120` = -1.85661764705882, 
   `121` = 4.34338235294118, `122` = -2.6, `123` = -1.85661764705882, `124` = -2.05661764705882, `125` = -2.7, `126` = -0.799999999999999, 
   `127` = 24.3, `128` = -3, `129` = -1.75661764705882, `130` = 3.5, `131` = 0.0433823529411757, `132` = -2.05661764705882, 
   `133` = -0.656617647058825, `134` = -2.45661764705882, `135` = -0.556617647058824, `136` = -3.1, `137` = 21.8, `138` = -3.1, 
   `139` = 0.443382352941176, `140` = -1.2, `141` = -3.1, `142` = -1.4, `143` = -0.499999999999999, `144` = -2.65661764705882, 
   `145` = 1.04338235294118, `146` = 2, `147` = -2.05661764705882, `148` = -2.4, `149` = -1.75661764705882, `150` = -2.4, `151` = 0.0433823529411757, 
   `152` = -2.9, `153` = -2.8, `154` = -1.9, `155` = 1, `156` = -1.55661764705882, `157` = -3.2, `158` = 7.3, `159` = -2.15661764705882, 
   `160` = -0.956617647058824, `161` = 10.3, `162` = -2.25661764705882, `163` = -2.4, `164` = 20.8, `165` = -2.05661764705882, 
   `166` = 7.1, `167` = -1.45661764705882, `168` = 0.743382352941176, `169` = -1.55661764705882, `170` = -2.35661764705882, 
   `171` = -3, `172` = -0.856617647058824, `173` = 1, `174` = -3.1, `175` = -2.45661764705882, `176` = -3.2, `177` = -3, `178` = -2.35661764705882, 
   `179` = 0.943382352941176, `180` = -3, `181` = -2.8, `182` = -2.5, `183` = -2.45661764705882, `184` = -2.8, `185` = 2.2, 
   `186` = 7.7, `187` = -2.1, `188` = 0.843382352941175, `189` = -2.8, `190` = 0.800000000000001, `191` = 11.1433823529412, 
   `192` = -1.95661764705882, `193` = -2.25661764705882, `194` = -3.2, `195` = -0.656617647058825, `196` = -3, `197` = 1.54338235294118, 
   `198` = -0.4, `199` = -0.299999999999999, `200` = -2.55661764705882, `201` = -2.05661764705882, `202` = -2.8, `203` = 9.3, 
   `204` = -1.45661764705882, `205` = -1.35661764705882, `206` = -2.15661764705882, `207` = -2.55661764705882, `208` = 0.700000000000001, 
   `209` = -1.05661764705882, `210` = 4.3, `211` = 0.943382352941176, `212` = -3.1, `213` = -0.856617647058824, `214` = 3.14338235294118, 
   `215` = -2.9, `216` = -1.65661764705882, `217` = -3.1, `218` = -2.45661764705882, `219` = -1.85661764705882, `220` = 4.14338235294117, 
   `221` = 0.143382352941176, `222` = -3, `223` = -1.85661764705882, `224` = -2.45661764705882, `225` = -1.85661764705882, `226` = -0.599999999999999, 
   `227` = 1.9, `228` = -0.899999999999999, `229` = -2.6, `230` = -0.299999999999999, `231` = -0.199999999999999, `232` = -2.45661764705882, 
   `233` = 3.64338235294118, `234` = 3.44338235294118, `235` = -0.0999999999999993, `236` = -1.95661764705882, `237` = -2.7, 
   `238` = -2.45661764705882, `239` = -1.5, `240` = -0.756617647058824, `241` = -1.95661764705882, `242` = -2.7, `243` = 1.9, 
   `244` = -3.2, `245` = -1.35661764705882, `246` = 14.9433823529412, `247` = -2.4, `248` = -2.6, `249` = -2.4, `250` = -2.15661764705882, 
   `251` = -0.956617647058824, `252` = 3.44338235294118, `253` = 5, `254` = 1.04338235294118, `255` = -1.55661764705882, `256` = 0.243382352941176, 
   `257` = 4.9, `258` = 4.8, `259` = 3.64338235294118, `260` = -0.556617647058824, `261` = -2.9, `262` = -1.75661764705882, 
   `263` = -2.6, `264` = -0.556617647058824, `265` = -2.7, `266` = -2.25661764705882, `267` = -2.7, `268` = -2.45661764705882, 
   `269` = -0.799999999999999, `270` = -3.1, `271` = -2.9, `272` = -2.55661764705882, `273` = -3.3, `274` = -1.25661764705882, 
   `275` = -0.956617647058824, `276` = 2.7), effects = c(`(Intercept)` = -55.3835117121081, trt = 6.17434906019536, -2.07517780836127, 
   -1.67517780836127, -1.10452800189898, -3.50452800189898, -4.20452800189898, -0.275177808361274, 8.09547199810102, -3.10452800189898, 
   -0.904528001898976, -3.80452800189898, -2.67517780836127, -3.80452800189898, -1.80452800189898, 7.92482219163873, -2.77517780836127, 
   0.595471998101024, -3.90452800189898, -0.075177808361274, 12.895471998101, -1.37517780836127, -3.80452800189898, 0.695471998101024, 
   17.095471998101, 12.695471998101, -3.80452800189898, -0.904528001898976, 0.195471998101024, -2.70452800189898, -3.70452800189898, 
   -2.67517780836127, -3.30452800189898, -4.20452800189898, 3.62482219163873, -1.20452800189898, -2.77517780836127, -2.37517780836127, 
   -1.20452800189898, 2.22482219163873, -4.00452800189898, -2.60452800189898, -2.37517780836127, -3.70452800189898, 2.52482219163873, 
   -2.17517780836127, -1.67517780836127, -3.40452800189898, -1.17517780836127, -2.67517780836127, -2.57517780836127, -3.90452800189898, 
   -3.20452800189898, 17.995471998101, -2.40452800189898, -2.27517780836127, -2.07517780836127, -3.40452800189898, -2.77517780836127, 
   16.5248221916387, -3.30452800189898, -4.00452800189898, -3.80452800189898, 4.92482219163873, 13.6248221916387, 8.72482219163872, 
   2.09547199810102, 2.82482219163873, -2.67517780836127, 2.69547199810102, 10.9248221916387, 1.02482219163873, -2.17517780836127, 
   -4.10452800189898, -2.40452800189898, 1.52482219163873, -2.37517780836127, -3.90452800189898, -1.47517780836127, -1.87517780836127, 
   0.495471998101024, -2.07517780836127, -2.17517780836127, -0.275177808361274, -2.50452800189898, -2.47517780836127, -2.70452800189898, 
   -2.20452800189898, -3.60452800189898, -2.57517780836127, -2.00452800189898, -2.37517780836127, -3.40452800189898, -3.90452800189898, 
   -3.07517780836127, -4.00452800189898, -1.57517780836127, 2.02482219163873, -2.50452800189898, 3.22482219163873, -1.30452800189898, 
   -3.80452800189898, -0.475177808361274, 3.02482219163873, 0.0248221916387261, -2.87517780836127, 0.0248221916387261, -3.20452800189898, 
   -2.87517780836127, -2.87517780836127, -3.20452800189898, -4.00452800189898, 12.895471998101, -1.70452800189898, -1.57517780836127, 
   -3.00452800189898, -3.80452800189898, -3.07517780836127, -2.67517780836127, -2.37517780836127, 3.82482219163873, -3.40452800189898, 
   -2.37517780836127, -2.57517780836127, -3.50452800189898, -1.60452800189898, 23.495471998101, -3.80452800189898, -2.27517780836127, 
   2.69547199810102, -0.475177808361274, -2.57517780836127, -1.17517780836127, -2.97517780836127, -1.07517780836127, -3.90452800189898, 
   20.995471998101, -3.90452800189898, -0.075177808361274, -2.00452800189898, -3.90452800189898, -2.20452800189898, -1.30452800189898, 
   -3.17517780836127, 0.524822191638726, 1.19547199810102, -2.57517780836127, -3.20452800189898, -2.27517780836127, -3.20452800189898, 
   -0.475177808361274, -3.70452800189898, -3.60452800189898, -2.70452800189898, 0.195471998101024, -2.07517780836127, -4.00452800189898, 
   6.49547199810102, -2.67517780836127, -1.47517780836127, 9.49547199810102, -2.77517780836127, -3.20452800189898, 19.995471998101, 
   -2.57517780836127, 6.29547199810102, -1.97517780836127, 0.224822191638726, -2.07517780836127, -2.87517780836127, -3.80452800189898, 
   -1.37517780836127, 0.195471998101024, -3.90452800189898, -2.97517780836127, -4.00452800189898, -3.80452800189898, -2.87517780836127, 
   0.424822191638726, -3.80452800189898, -3.60452800189898, -3.30452800189898, -2.97517780836127, -3.60452800189898, 1.39547199810102, 
   6.89547199810102, -2.90452800189898, 0.324822191638726, -3.60452800189898, -0.00452800189897591, 10.6248221916387, -2.47517780836127, 
   -2.77517780836127, -4.00452800189898, -1.17517780836127, -3.80452800189898, 1.02482219163873, -1.20452800189898, -1.10452800189898, 
   -3.07517780836127, -2.57517780836127, -3.60452800189898, 8.49547199810102, -1.97517780836127, -1.87517780836127, -2.67517780836127, 
   -3.07517780836127, -0.104528001898976, -1.57517780836127, 3.49547199810102, 0.424822191638726, -3.90452800189898, -1.37517780836127, 
   2.62482219163873, -3.70452800189898, -2.17517780836127, -3.90452800189898, -2.97517780836127, -2.37517780836127, 3.62482219163873, 
   -0.375177808361274, -3.80452800189898, -2.37517780836127, -2.97517780836127, -2.37517780836127, -1.40452800189898, 1.09547199810102, 
   -1.70452800189898, -3.40452800189898, -1.10452800189898, -1.00452800189898, -2.97517780836127, 3.12482219163873, 2.92482219163873, 
   -0.904528001898976, -2.47517780836127, -3.50452800189898, -2.97517780836127, -2.30452800189898, -1.27517780836127, -2.47517780836127, 
   -3.50452800189898, 1.09547199810102, -4.00452800189898, -1.87517780836127, 14.4248221916387, -3.20452800189898, -3.40452800189898, 
   -3.20452800189898, -2.67517780836127, -1.47517780836127, 2.92482219163873, 4.19547199810102, 0.524822191638726, -2.07517780836127, 
   -0.275177808361274, 4.09547199810102, 3.99547199810102, 3.12482219163873, -1.07517780836127, -3.70452800189898, -2.27517780836127, 
   -3.40452800189898, -1.07517780836127, -3.50452800189898, -2.77517780836127, -3.50452800189898, -2.97517780836127, -1.60452800189898, 
   -3.90452800189898, -3.70452800189898, -3.07517780836127, -4.10452800189898, -1.77517780836127, -1.47517780836127, 1.89547199810102
   ), rank = 2L, fitted.values = c(`1` = 2.95661764705883, `2` = 2.95661764705882, `3` = 2.95661764705882, `4` = 2.95661764705882, 
   `5` = 3.7, `6` = 3.7, `7` = 3.7, `8` = 2.95661764705882, `9` = 3.7, `10` = 3.7, `11` = 3.7, `12` = 3.7, `13` = 2.95661764705882, 
   `14` = 3.7, `15` = 3.7, `16` = 2.95661764705882, `17` = 2.95661764705882, `18` = 3.7, `19` = 3.7, `20` = 2.95661764705882, 
   `21` = 3.7, `22` = 2.95661764705882, `23` = 3.7, `24` = 3.7, `25` = 3.7, `26` = 3.7, `27` = 3.7, `28` = 3.7, `29` = 3.7, 
   `30` = 3.7, `31` = 3.7, `32` = 2.95661764705882, `33` = 3.7, `34` = 3.7, `35` = 2.95661764705882, `36` = 3.7, `37` = 2.95661764705882, 
   `38` = 2.95661764705882, `39` = 3.7, `40` = 2.95661764705882, `41` = 3.7, `42` = 3.7, `43` = 2.95661764705882, `44` = 3.7, 
   `45` = 2.95661764705882, `46` = 2.95661764705882, `47` = 2.95661764705882, `48` = 3.7, `49` = 2.95661764705882, `50` = 2.95661764705882, 
   `51` = 2.95661764705882, `52` = 3.7, `53` = 3.7, `54` = 3.7, `55` = 3.7, `56` = 2.95661764705882, `57` = 2.95661764705882, 
   `58` = 3.7, `59` = 2.95661764705882, `60` = 2.95661764705882, `61` = 3.7, `62` = 3.7, `63` = 3.7, `64` = 2.95661764705882, 
   `65` = 2.95661764705883, `66` = 2.95661764705883, `67` = 3.7, `68` = 2.95661764705882, `69` = 2.95661764705882, `70` = 3.7, 
   `71` = 2.95661764705883, `72` = 2.95661764705882, `73` = 2.95661764705882, `74` = 3.7, `75` = 3.7, `76` = 2.95661764705882, 
   `77` = 2.95661764705882, `78` = 3.7, `79` = 2.95661764705882, `80` = 2.95661764705882, `81` = 3.7, `82` = 2.95661764705882, 
   `83` = 2.95661764705882, `84` = 2.95661764705882, `85` = 3.7, `86` = 2.95661764705882, `87` = 3.7, `88` = 3.7, `89` = 3.7, 
   `90` = 2.95661764705882, `91` = 3.7, `92` = 2.95661764705882, `93` = 3.7, `94` = 3.7, `95` = 2.95661764705882, `96` = 3.7, 
   `97` = 2.95661764705882, `98` = 2.95661764705882, `99` = 3.7, `100` = 2.95661764705882, `101` = 3.7, `102` = 3.7, `103` = 2.95661764705882, 
   `104` = 2.95661764705882, `105` = 2.95661764705882, `106` = 2.95661764705882, `107` = 2.95661764705882, `108` = 3.7, `109` = 2.95661764705882, 
   `110` = 2.95661764705882, `111` = 3.7, `112` = 3.7, `113` = 3.7, `114` = 3.7, `115` = 2.95661764705882, `116` = 3.7, `117` = 3.7, 
   `118` = 2.95661764705882, `119` = 2.95661764705882, `120` = 2.95661764705882, `121` = 2.95661764705882, `122` = 3.7, `123` = 2.95661764705882, 
   `124` = 2.95661764705882, `125` = 3.7, `126` = 3.7, `127` = 3.7, `128` = 3.7, `129` = 2.95661764705882, `130` = 3.7, `131` = 2.95661764705882, 
   `132` = 2.95661764705882, `133` = 2.95661764705882, `134` = 2.95661764705882, `135` = 2.95661764705882, `136` = 3.7, `137` = 3.7, 
   `138` = 3.7, `139` = 2.95661764705882, `140` = 3.7, `141` = 3.7, `142` = 3.7, `143` = 3.7, `144` = 2.95661764705882, `145` = 2.95661764705882, 
   `146` = 3.7, `147` = 2.95661764705882, `148` = 3.7, `149` = 2.95661764705882, `150` = 3.7, `151` = 2.95661764705882, `152` = 3.7, 
   `153` = 3.7, `154` = 3.7, `155` = 3.7, `156` = 2.95661764705882, `157` = 3.7, `158` = 3.7, `159` = 2.95661764705882, `160` = 2.95661764705882, 
   `161` = 3.7, `162` = 2.95661764705882, `163` = 3.7, `164` = 3.7, `165` = 2.95661764705882, `166` = 3.7, `167` = 2.95661764705882, 
   `168` = 2.95661764705882, `169` = 2.95661764705882, `170` = 2.95661764705882, `171` = 3.7, `172` = 2.95661764705882, `173` = 3.7, 
   `174` = 3.7, `175` = 2.95661764705882, `176` = 3.7, `177` = 3.7, `178` = 2.95661764705882, `179` = 2.95661764705882, `180` = 3.7, 
   `181` = 3.7, `182` = 3.7, `183` = 2.95661764705882, `184` = 3.7, `185` = 3.7, `186` = 3.7, `187` = 3.7, `188` = 2.95661764705882, 
   `189` = 3.7, `190` = 3.7, `191` = 2.95661764705883, `192` = 2.95661764705882, `193` = 2.95661764705882, `194` = 3.7, `195` = 2.95661764705882, 
   `196` = 3.7, `197` = 2.95661764705882, `198` = 3.7, `199` = 3.7, `200` = 2.95661764705882, `201` = 2.95661764705882, `202` = 3.7, 
   `203` = 3.7, `204` = 2.95661764705882, `205` = 2.95661764705882, `206` = 2.95661764705882, `207` = 2.95661764705882, `208` = 3.7, 
   `209` = 2.95661764705882, `210` = 3.7, `211` = 2.95661764705882, `212` = 3.7, `213` = 2.95661764705882, `214` = 2.95661764705882, 
   `215` = 3.7, `216` = 2.95661764705882, `217` = 3.7, `218` = 2.95661764705882, `219` = 2.95661764705882, `220` = 2.95661764705882, 
   `221` = 2.95661764705882, `222` = 3.7, `223` = 2.95661764705882, `224` = 2.95661764705882, `225` = 2.95661764705882, `226` = 3.7, 
   `227` = 3.7, `228` = 3.7, `229` = 3.7, `230` = 3.7, `231` = 3.7, `232` = 2.95661764705882, `233` = 2.95661764705882, `234` = 2.95661764705882, 
   `235` = 3.7, `236` = 2.95661764705882, `237` = 3.7, `238` = 2.95661764705882, `239` = 3.7, `240` = 2.95661764705882, `241` = 2.95661764705882, 
   `242` = 3.7, `243` = 3.7, `244` = 3.7, `245` = 2.95661764705882, `246` = 2.95661764705883, `247` = 3.7, `248` = 3.7, `249` = 3.7, 
   `250` = 2.95661764705882, `251` = 2.95661764705882, `252` = 2.95661764705882, `253` = 3.7, `254` = 2.95661764705882, `255` = 2.95661764705882, 
   `256` = 2.95661764705882, `257` = 3.7, `258` = 3.7, `259` = 2.95661764705882, `260` = 2.95661764705882, `261` = 3.7, `262` = 2.95661764705882, 
   `263` = 3.7, `264` = 2.95661764705882, `265` = 3.7, `266` = 2.95661764705882, `267` = 3.7, `268` = 2.95661764705882, `269` = 3.7, 
   `270` = 3.7, `271` = 3.7, `272` = 2.95661764705882, `273` = 3.7, `274` = 2.95661764705882, `275` = 2.95661764705882, `276` = 3.7
   ), assign = 0:1, qr = structure(list(qr = structure(c(-16.6132477258361, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 
   0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, 0.0601929265428846, -25.04025744184, 
   8.30575145585135, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 
   -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, 0.0576043287521307, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, -0.0627941692423532, -0.0627941692423532, -0.0627941692423532, 
   0.0576043287521307, -0.0627941692423532, 0.0576043287521307, 0.0576043287521307, -0.0627941692423532), .Dim = c(276L, 2L), .Dimnames = list(
       c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", 
       "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", 
       "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", 
       "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", 
       "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", 
       "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", 
       "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131", "132", "133", "134", "135", 
       "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "150", "151", "152", 
       "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", 
       "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", 
       "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", "203", 
       "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", 
       "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", 
       "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", 
       "255", "256", "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", "271", 
       "272", "273", "274", "275", "276"), c("(Intercept)", "trt")), assign = 0:1), qraux = c(1.06019292654288, 1.05760432875213
   ), pivot = 1:2, tol = 0.0000001, rank = 2L), class = "qr"), df.residual = 274L, xlevels = structure(list(), .Names = character(0)), 
       call = lm(formula = bili ~ trt, data = data), terms = bili ~ trt, model = structure(list(bili = c(14.5, 1.1, 1.4, 1.8, 
       3.4, 1, 0.3, 3.2, 12.6, 1.4, 3.6, 0.7, 0.8, 0.7, 2.7, 11.4, 0.7, 5.1, 0.6, 3.4, 17.4, 2.1, 0.7, 5.2, 21.6, 17.2, 0.7, 
       3.6, 4.7, 1.8, 0.8, 0.8, 1.2, 0.3, 7.1, 3.3, 0.7, 1.1, 3.3, 5.7, 0.5, 1.9, 1.1, 0.8, 6, 1.3, 1.8, 1.1, 2.3, 0.8, 0.9, 
       0.6, 1.3, 22.5, 2.1, 1.2, 1.4, 1.1, 0.7, 20, 1.2, 0.5, 0.7, 8.4, 17.1, 12.2, 6.6, 6.3, 0.8, 7.2, 14.4, 4.5, 1.3, 0.4, 
       2.1, 5, 1.1, 0.6, 2, 1.6, 5, 1.4, 1.3, 3.2, 2, 1, 1.8, 2.3, 0.9, 0.9, 2.5, 1.1, 1.1, 0.6, 0.4, 0.5, 1.9, 5.5, 2, 6.7, 
       3.2, 0.7, 3, 6.5, 3.5, 0.6, 3.5, 1.3, 0.6, 0.6, 1.3, 0.5, 17.4, 2.8, 1.9, 1.5, 0.7, 0.4, 0.8, 1.1, 7.3, 1.1, 1.1, 0.9, 
       1, 2.9, 28, 0.7, 1.2, 7.2, 3, 0.9, 2.3, 0.5, 2.4, 0.6, 25.5, 0.6, 3.4, 2.5, 0.6, 2.3, 3.2, 0.3, 4, 5.7, 0.9, 1.3, 1.2, 
       1.3, 3, 0.8, 0.9, 1.8, 4.7, 1.4, 0.5, 11, 0.8, 2, 14, 0.7, 1.3, 24.5, 0.9, 10.8, 1.5, 3.7, 1.4, 0.6, 0.7, 2.1, 4.7, 0.6, 
       0.5, 0.5, 0.7, 0.6, 3.9, 0.7, 0.9, 1.2, 0.5, 0.9, 5.9, 11.4, 1.6, 3.8, 0.9, 4.5, 14.1, 1, 0.7, 0.5, 2.3, 0.7, 4.5, 3.3, 
       3.4, 0.4, 0.9, 0.9, 13, 1.5, 1.6, 0.8, 0.4, 4.4, 1.9, 8, 3.9, 0.6, 2.1, 6.1, 0.8, 1.3, 0.6, 0.5, 1.1, 7.1, 3.1, 0.7, 
       1.1, 0.5, 1.1, 3.1, 5.6, 2.8, 1.1, 3.4, 3.5, 0.5, 6.6, 6.4, 3.6, 1, 1, 0.5, 2.2, 2.2, 1, 1, 5.6, 0.5, 1.6, 17.9, 1.3, 
       1.1, 1.3, 0.8, 2, 6.4, 8.7, 4, 1.4, 3.2, 8.6, 8.5, 6.6, 2.4, 0.8, 1.2, 1.1, 2.4, 1, 0.7, 1, 0.5, 2.9, 0.6, 0.8, 0.4, 
       0.4, 1.7, 2, 6.4), trt = c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 2L, 
       2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 
       2L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 
       1L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 
       2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 
       1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 
       2L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 
       1L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 
       1L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 
       1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 2L)), terms = bili ~ trt, row.names = c(NA, 276L), class = "data.frame"))
24: is.factor(object)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

══ Results ═════════════════════════════════════════════════════════════════════════════════════════════════════════════
Duration: 3.3 s

OK:       564
Failed:   3
Warnings: 1
Skipped:  6
