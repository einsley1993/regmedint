✔ |  OK F W S | Context
⠏ |   0       | 02_new_regmedint✖ |   0 1     | 02_new_regmedint
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-02_new_regmedint.R:20: error: new_regmedint: returns an object with a class of regmedint
argument "casecontrol" is missing, with no default
1: new_regmedint(NULL) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-02_new_regmedint.R:20
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 03_fit_mreg✔ |  24       | 03_fit_mreg
⠏ |   0       | 03_helpers_fit_mreg_fit_yreg✔ |  15       | 03_helpers_fit_mreg_fit_yreg
⠏ |   0       | 04_fit_yreg_linear✔ |  24       | 04_fit_yreg_linear
⠏ |   0       | 04_fit_yreg_logistic✔ |  24       | 04_fit_yreg_logistic
⠏ |   0       | 04_fit_yreg_poisson✔ |  24       | 04_fit_yreg_poisson
⠏ |   0       | 04_fit_yreg_survAFT_exp✔ |  24       | 04_fit_yreg_survAFT_exp
⠏ |   0       | 04_fit_yreg_survAFT_weibull✔ |  24       | 04_fit_yreg_survAFT_weibull
⠼ |  24 1     | 04_fit_yreg_survAFT_weibull✖ |  24 1     | 04_fit_yreg_survAFT_weibull
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-05_calc_myreg.R:18: error: (unknown)
argument "cvar" is missing, with no default
1: describe("calc_myreg", {
       res_calc_myreg <- calc_myreg()
       it("returns a list of two functions", {
           expect_equal(length(res_calc_myreg), 2)
           expect_equal(class(res_calc_myreg[[1]]), "function")
           expect_equal(class(res_calc_myreg[[2]]), "function")
       })
       it("returns a list of two functions with four argumens (a0, a1, m_cde, c_cond)", {
           expect_equal(formals(res_calc_myreg[[1]]), c("a0", "a1", "m_cde", "c_cond"))
           expect_equal(formals(res_calc_myreg[[2]]), c("a0", "a1", "m_cde", "c_cond"))
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-05_calc_myreg.R:18
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: calc_myreg() at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-05_calc_myreg.R:19
5: assertthat::assert_that(!is.null(cvar)) at /inv/kyoshida/cantos_stats/regmedint/R/05_calc_myreg_mediation_analysis.R:28
6: see_if(..., env = env, msg = msg)
7: tryCatch({
       eval(assertion, env)
   }, assertError = function(e) {
       structure(FALSE, msg = e$message)
   })
8: tryCatchList(expr, classes, parentenv, handlers)
9: tryCatchOne(expr, names, parentenv, handlers[[1L]])
10: doTryCatch(return(expr), name, parentenv, handler)
11: eval(assertion, env)
12: eval(assertion, env)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 06_calc_myreg_helpers_coef⠙ |  29 3     | 06_calc_myreg_helpers_coef✖ |  35 8     | 06_calc_myreg_helpers_coef [0.1 s]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-06_calc_myreg_helpers_coef.R:285: error: theta_hat for yreg loglinear: extracts coef correctly when there is no interaction (add zero)
no valid set of coefficients has been found: please supply starting values
1: fit_yreg(yreg = "loglinear", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = c("age", "male", "stage"), 
       interaction = FALSE, eventvar = NULL) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_coef.R:285
2: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data))) at /inv/kyoshida/cantos_stats/regmedint/R/04_fit_yreg_outcome_modeling.R:77
3: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data)))
4: glm(formula = spiders ~ trt + bili + age + male + stage, family = binomial(link = "log"), data = data)
5: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
6: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
7: glm.fit(x = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 
   1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 
   2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
   1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 
   1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 14.5, 1.1, 1.4, 1.8, 3.4, 1, 0.3, 3.2, 12.6, 
   1.4, 3.6, 0.7, 0.8, 0.7, 2.7, 11.4, 0.7, 5.1, 0.6, 3.4, 17.4, 2.1, 0.7, 5.2, 21.6, 17.2, 0.7, 3.6, 4.7, 1.8, 0.8, 0.8, 1.2, 
   0.3, 7.1, 3.3, 0.7, 1.1, 3.3, 5.7, 0.5, 1.9, 1.1, 0.8, 6, 1.3, 1.8, 1.1, 2.3, 0.8, 0.9, 0.6, 1.3, 22.5, 2.1, 1.2, 1.4, 1.1, 
   0.7, 20, 1.2, 0.5, 0.7, 8.4, 17.1, 12.2, 6.6, 6.3, 0.8, 7.2, 14.4, 4.5, 1.3, 0.4, 2.1, 5, 1.1, 0.6, 2, 1.6, 5, 1.4, 1.3, 
   3.2, 2, 1, 1.8, 2.3, 0.9, 0.9, 2.5, 1.1, 1.1, 0.6, 0.4, 0.5, 1.9, 5.5, 2, 6.7, 3.2, 0.7, 3, 6.5, 3.5, 0.6, 3.5, 1.3, 0.6, 
   0.6, 1.3, 0.5, 17.4, 2.8, 1.9, 1.5, 0.7, 0.4, 0.8, 1.1, 7.3, 1.1, 1.1, 0.9, 1, 2.9, 28, 0.7, 1.2, 7.2, 3, 0.9, 2.3, 0.5, 
   2.4, 0.6, 25.5, 0.6, 3.4, 2.5, 0.6, 2.3, 3.2, 0.3, 4, 5.7, 0.9, 1.3, 1.2, 1.3, 3, 0.8, 0.9, 1.8, 4.7, 1.4, 0.5, 11, 0.8, 
   2, 14, 0.7, 1.3, 24.5, 0.9, 10.8, 1.5, 3.7, 1.4, 0.6, 0.7, 2.1, 4.7, 0.6, 0.5, 0.5, 0.7, 0.6, 3.9, 0.7, 0.9, 1.2, 0.5, 0.9, 
   5.9, 11.4, 1.6, 3.8, 0.9, 4.5, 14.1, 1, 0.7, 0.5, 2.3, 0.7, 4.5, 3.3, 3.4, 0.4, 0.9, 0.9, 13, 1.5, 1.6, 0.8, 0.4, 4.4, 1.9, 
   8, 3.9, 0.6, 2.1, 6.1, 0.8, 1.3, 0.6, 0.5, 1.1, 7.1, 3.1, 0.7, 1.1, 0.5, 1.1, 3.1, 5.6, 2.8, 1.1, 3.4, 3.5, 0.5, 6.6, 6.4, 
   3.6, 1, 1, 0.5, 2.2, 2.2, 1, 1, 5.6, 0.5, 1.6, 17.9, 1.3, 1.1, 1.3, 0.8, 2, 6.4, 8.7, 4, 1.4, 3.2, 8.6, 8.5, 6.6, 2.4, 0.8, 
   1.2, 1.1, 2.4, 1, 0.7, 1, 0.5, 2.9, 0.6, 0.8, 0.4, 0.4, 1.7, 2, 6.4, 58.7652292950034, 56.4462696783025, 70.072553045859, 
   54.7405886379192, 38.1054072553046, 55.5345653661875, 53.056810403833, 42.507871321013, 70.5598904859685, 53.7138945927447, 
   59.1375770020534, 45.6892539356605, 64.6461327857632, 40.4435318275154, 52.1834360027378, 53.9301848049281, 49.5605749486653, 
   59.9534565366188, 64.1889117043121, 56.2765229295003, 55.9671457905544, 44.5201916495551, 45.0732375085558, 52.0246406570842, 
   54.4394250513347, 44.9472963723477, 63.8767967145791, 41.3853524982888, 41.5523613963039, 53.9958932238193, 51.2826830937714, 
   52.0602327173169, 48.6187542778919, 56.4106776180698, 61.7275838466804, 36.6269678302532, 55.3921971252567, 48.870636550308, 
   37.5824777549624, 45.7987679671458, 47.4277891854894, 49.1362080766598, 53.5085557837098, 52.0876112251882, 50.5407255304586, 
   39.1978097193703, 65.7631759069131, 33.6180698151951, 53.5715263518138, 40.394250513347, 58.3819301848049, 43.8986995208761, 
   60.7063655030801, 46.6283367556468, 62.9075975359343, 40.2026009582478, 46.4531143052704, 51.2881587953457, 32.6132785763176, 
   49.3388090349076, 48.8459958932238, 32.4928131416838, 38.4941820670773, 51.9206023271732, 43.5181382614647, 51.9425051334702, 
   49.8261464750171, 47.9452429842574, 46.5160848733744, 67.4113620807666, 63.2635181382615, 67.3100616016427, 56.0136892539357, 
   55.8302532511978, 47.2169746748802, 52.7583846680356, 37.2785763175907, 41.3935660506502, 52.4435318275154, 33.4757015742642, 
   45.6071184120465, 76.7091033538672, 36.5338809034908, 53.9164955509925, 71.8932238193019, 28.8843258042437, 48.4681724845996, 
   51.4688569472964, 44.9500342231348, 56.5694729637235, 48.9637234770705, 43.0171115674196, 34.0396988364134, 62.5215605749487, 
   50.3572895277207, 44.062970568104, 38.9103353867214, 41.1526351813826, 55.4579055441478, 51.233401779603, 52.8268309377139, 
   42.6392881587953, 61.0704996577687, 49.6563997262149, 48.8542094455852, 54.2559890485969, 35.1512662559891, 67.9069130732375, 
   55.4360027378508, 52.8898015058179, 47.1813826146475, 44.104038329911, 44.227241615332, 62.0013689253936, 40.5530458590007, 
   62.6447638603696, 42.3353867214237, 42.9678302532512, 55.9616700889801, 62.861054072553, 51.2498288843258, 46.7624914442163, 
   54.0752908966461, 47.0362765229295, 55.7262149212868, 46.1026694045175, 52.2874743326489, 51.2005475701574, 75.0116358658453, 
   30.8637919233402, 61.8042436687201, 55.0417522245038, 69.9411362080767, 49.6043805612594, 69.3771389459274, 43.5564681724846, 
   59.4086242299795, 48.7583846680356, 36.4928131416838, 45.7604380561259, 57.3716632443532, 42.7433264887064, 58.8172484599589, 
   53.4976043805613, 53.305954825462, 41.3552361396304, 60.9582477754962, 35.4907597535934, 48.662559890486, 49.8699520876112, 
   30.2751540041068, 52.1533196440794, 55.4524298425736, 43.9425051334702, 42.5681040383299, 44.5694729637235, 40.2600958247776, 
   37.6071184120465, 48.3613963039014, 70.8364134154689, 35.791923340178, 62.6228610540726, 50.6475017111567, 52.6926762491444, 
   52.7200547570157, 56.7720739219713, 44.3969883641342, 29.555099247091, 57.0403832991102, 44.6269678302532, 35.7973990417522, 
   40.7173169062286, 32.2327173169062, 41.0924024640657, 61.6399726214921, 37.056810403833, 62.5790554414784, 61.990417522245, 
   61.2950034223135, 52.6242299794661, 49.7631759069131, 47.2635181382615, 50.2039698836413, 69.347022587269, 41.1690622861054, 
   36.0793976728268, 42.7132101300479, 63.6303901437372, 56.6297056810404, 46.2642026009582, 61.242984257358, 38.6201232032854, 
   38.7707049965777, 56.6954140999316, 58.9514031485284, 36.9226557152635, 62.4147843942505, 34.6091718001369, 58.3353867214237, 
   50.1820670773443, 42.6858316221766, 34.3791923340178, 33.1827515400411, 38.3819301848049, 59.7618069815195, 46.7898699520876, 
   56.0793976728268, 41.3744010951403, 64.5722108145106, 67.4880219028063, 44.829568788501, 45.7713894592745, 32.9500342231348, 
   41.2210814510609, 55.4168377823409, 47.9808350444901, 40.7912388774812, 56.974674880219, 68.4626967830253, 78.4394250513347, 
   39.8576317590691, 35.3100616016427, 31.4442162902122, 58.2642026009582, 51.4880219028063, 59.9698836413415, 74.5242984257358, 
   42.7871321013005, 34.8747433264887, 44.1396303901437, 46.3819301848049, 56.3093771389459, 70.9075975359343, 55.3949349760438, 
   45.0841889117043, 26.2778918548939, 50.4722792607803, 38.3983572895277, 47.419575633128, 38.3162217659138, 50.1081451060917, 
   35.088295687885, 32.5037645448323, 56.1533196440794, 46.154688569473, 65.8836413415469, 33.9438740588638, 62.861054072553, 
   48.5639972621492, 46.3490759753593, 38.8528405201916, 58.6475017111567, 48.9363449691992, 67.5728952772074, 65.9849418206708, 
   40.9007529089665, 50.2450376454483, 57.1964407939767, 60.5366187542779, 35.3511293634497, 31.3812457221081, 55.9863107460643, 
   52.72553045859, 38.0917180013689, 45.2101300479124, 37.7987679671458, 60.6598220396988, 35.5345653661875, 43.066392881588, 
   56.3915126625599, 30.5735797399042, 61.1827515400411, 58.299794661191, 62.3326488706366, 37.9986310746064, 33.1526351813826, 
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 4, 4, 3, 3, 3, 2, 4, 4, 4, 
   3, 3, 3, 4, 4, 3, 4, 4, 4, 4, 2, 2, 3, 4, 4, 2, 4, 2, 4, 3, 2, 3, 2, 4, 4, 4, 2, 3, 3, 3, 3, 4, 2, 1, 4, 3, 2, 3, 3, 3, 1, 
   4, 3, 3, 1, 3, 3, 3, 3, 4, 3, 1, 4, 4, 4, 3, 4, 3, 4, 4, 3, 4, 3, 4, 3, 3, 3, 2, 2, 4, 4, 2, 4, 3, 1, 2, 4, 3, 1, 4, 2, 3, 
   1, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 4, 4, 2, 3, 4, 3, 4, 2, 2, 2, 2, 3, 4, 3, 2, 2, 4, 3, 3, 2, 3, 4, 2, 3, 1, 
   3, 4, 2, 2, 2, 3, 3, 2, 4, 3, 4, 2, 4, 3, 3, 3, 2, 3, 2, 4, 3, 4, 2, 3, 3, 3, 3, 4, 3, 4, 4, 4, 2, 4, 4, 2, 2, 3, 3, 4, 2, 
   2, 3, 1, 4, 2, 2, 3, 3, 3, 3, 4, 3, 2, 4, 3, 4, 3, 2, 3, 2, 3, 4, 4, 4, 3, 4, 2, 3, 3, 3, 4, 3, 4, 3, 4, 3, 3, 4, 3, 3, 4, 
   4, 2, 4, 4, 3, 3, 3, 2, 1, 3, 4, 3, 4, 3, 4, 3, 4, 4, 2, 3, 3, 1, 3, 4, 2, 3, 4, 2, 3, 4, 4, 4, 3, 1, 3, 4, 2, 2, 3, 4, 3, 
   4, 4, 3, 4, 4, 3, 3, 4, 2, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2), .Dim = c(276L, 6L), .Dimnames = list(c("1", "2", "3", "4", "5", 
   "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", 
   "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", 
   "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", 
   "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", 
   "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", 
   "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", 
   "127", "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", 
   "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", 
   "163", "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", 
   "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", 
   "199", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", 
   "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", 
   "235", "236", "237", "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", 
   "253", "254", "255", "256", "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", 
   "271", "272", "273", "274", "275", "276"), c("(Intercept)", "trt", "bili", "age", "male", "stage")), assign = 0:5), y = c(`1` = 1L, 
   `2` = 1L, `3` = 0L, `4` = 1L, `5` = 1L, `6` = 0L, `7` = 0L, `8` = 1L, `9` = 1L, `10` = 1L, `11` = 1L, `12` = 0L, `13` = 0L, 
   `14` = 0L, `15` = 0L, `16` = 1L, `17` = 0L, `18` = 0L, `19` = 1L, `20` = 1L, `21` = 1L, `22` = 0L, `23` = 0L, `24` = 1L, 
   `25` = 1L, `26` = 1L, `27` = 0L, `28` = 1L, `29` = 0L, `30` = 0L, `31` = 0L, `32` = 0L, `33` = 0L, `34` = 0L, `35` = 0L, 
   `36` = 1L, `37` = 0L, `38` = 0L, `39` = 1L, `40` = 0L, `41` = 0L, `42` = 0L, `43` = 0L, `44` = 0L, `45` = 0L, `46` = 1L, 
   `47` = 0L, `48` = 1L, `49` = 0L, `50` = 1L, `51` = 0L, `52` = 0L, `53` = 0L, `54` = 1L, `55` = 0L, `56` = 0L, `57` = 0L, 
   `58` = 0L, `59` = 0L, `60` = 1L, `61` = 0L, `62` = 0L, `63` = 0L, `64` = 1L, `65` = 1L, `66` = 1L, `67` = 1L, `68` = 0L, 
   `69` = 0L, `70` = 0L, `71` = 1L, `72` = 0L, `73` = 0L, `74` = 0L, `75` = 0L, `76` = 1L, `77` = 0L, `78` = 0L, `79` = 0L, 
   `80` = 0L, `81` = 1L, `82` = 0L, `83` = 0L, `84` = 1L, `85` = 0L, `86` = 0L, `87` = 0L, `88` = 0L, `89` = 0L, `90` = 0L, 
   `91` = 1L, `92` = 0L, `93` = 0L, `94` = 0L, `95` = 0L, `96` = 0L, `97` = 1L, `98` = 0L, `99` = 1L, `100` = 1L, `101` = 0L, 
   `102` = 1L, `103` = 1L, `104` = 1L, `105` = 0L, `106` = 1L, `107` = 0L, `108` = 0L, `109` = 0L, `110` = 0L, `111` = 0L, `112` = 0L, 
   `113` = 1L, `114` = 1L, `115` = 0L, `116` = 0L, `117` = 0L, `118` = 0L, `119` = 0L, `120` = 0L, `121` = 0L, `122` = 0L, `123` = 0L, 
   `124` = 0L, `125` = 0L, `126` = 0L, `127` = 0L, `128` = 1L, `129` = 0L, `130` = 0L, `131` = 1L, `132` = 0L, `133` = 0L, `134` = 0L, 
   `135` = 1L, `136` = 1L, `137` = 0L, `138` = 0L, `139` = 0L, `140` = 0L, `141` = 0L, `142` = 0L, `143` = 1L, `144` = 0L, `145` = 0L, 
   `146` = 0L, `147` = 0L, `148` = 0L, `149` = 0L, `150` = 1L, `151` = 1L, `152` = 0L, `153` = 0L, `154` = 0L, `155` = 0L, `156` = 1L, 
   `157` = 0L, `158` = 0L, `159` = 0L, `160` = 1L, `161` = 0L, `162` = 0L, `163` = 0L, `164` = 1L, `165` = 0L, `166` = 0L, `167` = 0L, 
   `168` = 0L, `169` = 1L, `170` = 0L, `171` = 1L, `172` = 0L, `173` = 1L, `174` = 0L, `175` = 0L, `176` = 0L, `177` = 0L, `178` = 0L, 
   `179` = 0L, `180` = 1L, `181` = 0L, `182` = 0L, `183` = 1L, `184` = 0L, `185` = 0L, `186` = 0L, `187` = 0L, `188` = 1L, `189` = 0L, 
   `190` = 0L, `191` = 0L, `192` = 0L, `193` = 0L, `194` = 0L, `195` = 0L, `196` = 0L, `197` = 0L, `198` = 1L, `199` = 1L, `200` = 0L, 
   `201` = 1L, `202` = 0L, `203` = 0L, `204` = 1L, `205` = 0L, `206` = 1L, `207` = 0L, `208` = 1L, `209` = 0L, `210` = 0L, `211` = 1L, 
   `212` = 0L, `213` = 0L, `214` = 0L, `215` = 0L, `216` = 1L, `217` = 0L, `218` = 0L, `219` = 1L, `220` = 1L, `221` = 1L, `222` = 1L, 
   `223` = 0L, `224` = 0L, `225` = 0L, `226` = 0L, `227` = 0L, `228` = 0L, `229` = 1L, `230` = 1L, `231` = 0L, `232` = 0L, `233` = 1L, 
   `234` = 0L, `235` = 0L, `236` = 1L, `237` = 0L, `238` = 0L, `239` = 1L, `240` = 0L, `241` = 0L, `242` = 0L, `243` = 0L, `244` = 0L, 
   `245` = 0L, `246` = 0L, `247` = 0L, `248` = 0L, `249` = 0L, `250` = 0L, `251` = 1L, `252` = 1L, `253` = 0L, `254` = 0L, `255` = 0L, 
   `256` = 0L, `257` = 0L, `258` = 1L, `259` = 0L, `260` = 0L, `261` = 0L, `262` = 0L, `263` = 0L, `264` = 0L, `265` = 0L, `266` = 0L, 
   `267` = 1L, `268` = 0L, `269` = 1L, `270` = 0L, `271` = 0L, `272` = 0L, `273` = 0L, `274` = 0L, `275` = 0L, `276` = 1L), 
       weights = NULL, start = NULL, etastart = NULL, mustart = NULL, offset = NULL, family = structure(list(family = "binomial", 
           link = "log", linkfun = function (mu) 
           log(mu), linkinv = function (eta) 
           pmax(exp(eta), .Machine$double.eps), variance = function (mu) 
           mu * (1 - mu), dev.resids = function (y, mu, wt) 
           .Call(C_binomial_dev_resids, y, mu, wt), aic = function (y, n, mu, wt, dev) 
           {
               m <- if (any(n > 1)) 
                   n
               else wt
               -2 * sum(ifelse(m > 0, (wt/m), 0) * dbinom(round(m * y), round(m), mu, log = TRUE))
           }, mu.eta = function (eta) 
           pmax(exp(eta), .Machine$double.eps), initialize = expression({
               if (NCOL(y) == 1) {
                   if (is.factor(y)) 
                     y <- y != levels(y)[1L]
                   n <- rep.int(1, nobs)
                   y[weights == 0] <- 0
                   if (any(y < 0 | y > 1)) 
                     stop("y values must be 0 <= y <= 1")
                   mustart <- (weights * y + 0.5)/(weights + 1)
                   m <- weights * y
                   if (any(abs(m - round(m)) > 0.001)) 
                     warning("non-integer #successes in a binomial glm!")
               }
               else if (NCOL(y) == 2) {
                   if (any(abs(y - round(y)) > 0.001)) 
                     warning("non-integer counts in a binomial glm!")
                   n <- y[, 1] + y[, 2]
                   y <- ifelse(n == 0, 0, y[, 1]/n)
                   weights <- weights * n
                   mustart <- (n * y + 0.5)/(n + 1)
               }
               else stop("for the 'binomial' family, y must be a vector of 0 and 1's\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures")
           }), validmu = function (mu) 
           all(is.finite(mu)) && all(mu > 0 & mu < 1), valideta = function (eta) 
           TRUE, simulate = function (object, nsim) 
           {
               ftd <- fitted(object)
               n <- length(ftd)
               ntot <- n * nsim
               wts <- object$prior.weights
               if (any(wts%%1 != 0)) 
                   stop("cannot simulate from non-integer prior.weights")
               if (!is.null(m <- object$model)) {
                   y <- model.response(m)
                   if (is.factor(y)) {
                     yy <- factor(1 + rbinom(ntot, size = 1, prob = ftd), labels = levels(y))
                     split(yy, rep(seq_len(nsim), each = n))
                   }
                   else if (is.matrix(y) && ncol(y) == 2) {
                     yy <- vector("list", nsim)
                     for (i in seq_len(nsim)) {
                       Y <- rbinom(n, size = wts, prob = ftd)
                       YY <- cbind(Y, wts - Y)
                       colnames(YY) <- colnames(y)
                       yy[[i]] <- YY
                     }
                     yy
                   }
                   else rbinom(ntot, size = wts, prob = ftd)/wts
               }
               else rbinom(ntot, size = wts, prob = ftd)/wts
           }), class = "family"), control = list(epsilon = 0.00000001, maxit = 25, trace = FALSE), intercept = TRUE, singular.ok = TRUE)
8: stop("no valid set of coefficients has been found: please supply starting values", call. = FALSE)

test-06_calc_myreg_helpers_coef.R:315: error: theta_hat for yreg loglinear: extracts coef correctly when there is an interaction
no valid set of coefficients has been found: please supply starting values
1: fit_yreg(yreg = "loglinear", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = c("age", "male", "stage"), 
       interaction = TRUE, eventvar = NULL) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_coef.R:315
2: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data))) at /inv/kyoshida/cantos_stats/regmedint/R/04_fit_yreg_outcome_modeling.R:77
3: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data)))
4: glm(formula = spiders ~ trt * bili + age + male + stage, family = binomial(link = "log"), data = data)
5: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
6: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
7: glm.fit(x = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 
   1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 
   2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
   1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 
   1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 14.5, 1.1, 1.4, 1.8, 3.4, 1, 0.3, 3.2, 12.6, 
   1.4, 3.6, 0.7, 0.8, 0.7, 2.7, 11.4, 0.7, 5.1, 0.6, 3.4, 17.4, 2.1, 0.7, 5.2, 21.6, 17.2, 0.7, 3.6, 4.7, 1.8, 0.8, 0.8, 1.2, 
   0.3, 7.1, 3.3, 0.7, 1.1, 3.3, 5.7, 0.5, 1.9, 1.1, 0.8, 6, 1.3, 1.8, 1.1, 2.3, 0.8, 0.9, 0.6, 1.3, 22.5, 2.1, 1.2, 1.4, 1.1, 
   0.7, 20, 1.2, 0.5, 0.7, 8.4, 17.1, 12.2, 6.6, 6.3, 0.8, 7.2, 14.4, 4.5, 1.3, 0.4, 2.1, 5, 1.1, 0.6, 2, 1.6, 5, 1.4, 1.3, 
   3.2, 2, 1, 1.8, 2.3, 0.9, 0.9, 2.5, 1.1, 1.1, 0.6, 0.4, 0.5, 1.9, 5.5, 2, 6.7, 3.2, 0.7, 3, 6.5, 3.5, 0.6, 3.5, 1.3, 0.6, 
   0.6, 1.3, 0.5, 17.4, 2.8, 1.9, 1.5, 0.7, 0.4, 0.8, 1.1, 7.3, 1.1, 1.1, 0.9, 1, 2.9, 28, 0.7, 1.2, 7.2, 3, 0.9, 2.3, 0.5, 
   2.4, 0.6, 25.5, 0.6, 3.4, 2.5, 0.6, 2.3, 3.2, 0.3, 4, 5.7, 0.9, 1.3, 1.2, 1.3, 3, 0.8, 0.9, 1.8, 4.7, 1.4, 0.5, 11, 0.8, 
   2, 14, 0.7, 1.3, 24.5, 0.9, 10.8, 1.5, 3.7, 1.4, 0.6, 0.7, 2.1, 4.7, 0.6, 0.5, 0.5, 0.7, 0.6, 3.9, 0.7, 0.9, 1.2, 0.5, 0.9, 
   5.9, 11.4, 1.6, 3.8, 0.9, 4.5, 14.1, 1, 0.7, 0.5, 2.3, 0.7, 4.5, 3.3, 3.4, 0.4, 0.9, 0.9, 13, 1.5, 1.6, 0.8, 0.4, 4.4, 1.9, 
   8, 3.9, 0.6, 2.1, 6.1, 0.8, 1.3, 0.6, 0.5, 1.1, 7.1, 3.1, 0.7, 1.1, 0.5, 1.1, 3.1, 5.6, 2.8, 1.1, 3.4, 3.5, 0.5, 6.6, 6.4, 
   3.6, 1, 1, 0.5, 2.2, 2.2, 1, 1, 5.6, 0.5, 1.6, 17.9, 1.3, 1.1, 1.3, 0.8, 2, 6.4, 8.7, 4, 1.4, 3.2, 8.6, 8.5, 6.6, 2.4, 0.8, 
   1.2, 1.1, 2.4, 1, 0.7, 1, 0.5, 2.9, 0.6, 0.8, 0.4, 0.4, 1.7, 2, 6.4, 58.7652292950034, 56.4462696783025, 70.072553045859, 
   54.7405886379192, 38.1054072553046, 55.5345653661875, 53.056810403833, 42.507871321013, 70.5598904859685, 53.7138945927447, 
   59.1375770020534, 45.6892539356605, 64.6461327857632, 40.4435318275154, 52.1834360027378, 53.9301848049281, 49.5605749486653, 
   59.9534565366188, 64.1889117043121, 56.2765229295003, 55.9671457905544, 44.5201916495551, 45.0732375085558, 52.0246406570842, 
   54.4394250513347, 44.9472963723477, 63.8767967145791, 41.3853524982888, 41.5523613963039, 53.9958932238193, 51.2826830937714, 
   52.0602327173169, 48.6187542778919, 56.4106776180698, 61.7275838466804, 36.6269678302532, 55.3921971252567, 48.870636550308, 
   37.5824777549624, 45.7987679671458, 47.4277891854894, 49.1362080766598, 53.5085557837098, 52.0876112251882, 50.5407255304586, 
   39.1978097193703, 65.7631759069131, 33.6180698151951, 53.5715263518138, 40.394250513347, 58.3819301848049, 43.8986995208761, 
   60.7063655030801, 46.6283367556468, 62.9075975359343, 40.2026009582478, 46.4531143052704, 51.2881587953457, 32.6132785763176, 
   49.3388090349076, 48.8459958932238, 32.4928131416838, 38.4941820670773, 51.9206023271732, 43.5181382614647, 51.9425051334702, 
   49.8261464750171, 47.9452429842574, 46.5160848733744, 67.4113620807666, 63.2635181382615, 67.3100616016427, 56.0136892539357, 
   55.8302532511978, 47.2169746748802, 52.7583846680356, 37.2785763175907, 41.3935660506502, 52.4435318275154, 33.4757015742642, 
   45.6071184120465, 76.7091033538672, 36.5338809034908, 53.9164955509925, 71.8932238193019, 28.8843258042437, 48.4681724845996, 
   51.4688569472964, 44.9500342231348, 56.5694729637235, 48.9637234770705, 43.0171115674196, 34.0396988364134, 62.5215605749487, 
   50.3572895277207, 44.062970568104, 38.9103353867214, 41.1526351813826, 55.4579055441478, 51.233401779603, 52.8268309377139, 
   42.6392881587953, 61.0704996577687, 49.6563997262149, 48.8542094455852, 54.2559890485969, 35.1512662559891, 67.9069130732375, 
   55.4360027378508, 52.8898015058179, 47.1813826146475, 44.104038329911, 44.227241615332, 62.0013689253936, 40.5530458590007, 
   62.6447638603696, 42.3353867214237, 42.9678302532512, 55.9616700889801, 62.861054072553, 51.2498288843258, 46.7624914442163, 
   54.0752908966461, 47.0362765229295, 55.7262149212868, 46.1026694045175, 52.2874743326489, 51.2005475701574, 75.0116358658453, 
   30.8637919233402, 61.8042436687201, 55.0417522245038, 69.9411362080767, 49.6043805612594, 69.3771389459274, 43.5564681724846, 
   59.4086242299795, 48.7583846680356, 36.4928131416838, 45.7604380561259, 57.3716632443532, 42.7433264887064, 58.8172484599589, 
   53.4976043805613, 53.305954825462, 41.3552361396304, 60.9582477754962, 35.4907597535934, 48.662559890486, 49.8699520876112, 
   30.2751540041068, 52.1533196440794, 55.4524298425736, 43.9425051334702, 42.5681040383299, 44.5694729637235, 40.2600958247776, 
   37.6071184120465, 48.3613963039014, 70.8364134154689, 35.791923340178, 62.6228610540726, 50.6475017111567, 52.6926762491444, 
   52.7200547570157, 56.7720739219713, 44.3969883641342, 29.555099247091, 57.0403832991102, 44.6269678302532, 35.7973990417522, 
   40.7173169062286, 32.2327173169062, 41.0924024640657, 61.6399726214921, 37.056810403833, 62.5790554414784, 61.990417522245, 
   61.2950034223135, 52.6242299794661, 49.7631759069131, 47.2635181382615, 50.2039698836413, 69.347022587269, 41.1690622861054, 
   36.0793976728268, 42.7132101300479, 63.6303901437372, 56.6297056810404, 46.2642026009582, 61.242984257358, 38.6201232032854, 
   38.7707049965777, 56.6954140999316, 58.9514031485284, 36.9226557152635, 62.4147843942505, 34.6091718001369, 58.3353867214237, 
   50.1820670773443, 42.6858316221766, 34.3791923340178, 33.1827515400411, 38.3819301848049, 59.7618069815195, 46.7898699520876, 
   56.0793976728268, 41.3744010951403, 64.5722108145106, 67.4880219028063, 44.829568788501, 45.7713894592745, 32.9500342231348, 
   41.2210814510609, 55.4168377823409, 47.9808350444901, 40.7912388774812, 56.974674880219, 68.4626967830253, 78.4394250513347, 
   39.8576317590691, 35.3100616016427, 31.4442162902122, 58.2642026009582, 51.4880219028063, 59.9698836413415, 74.5242984257358, 
   42.7871321013005, 34.8747433264887, 44.1396303901437, 46.3819301848049, 56.3093771389459, 70.9075975359343, 55.3949349760438, 
   45.0841889117043, 26.2778918548939, 50.4722792607803, 38.3983572895277, 47.419575633128, 38.3162217659138, 50.1081451060917, 
   35.088295687885, 32.5037645448323, 56.1533196440794, 46.154688569473, 65.8836413415469, 33.9438740588638, 62.861054072553, 
   48.5639972621492, 46.3490759753593, 38.8528405201916, 58.6475017111567, 48.9363449691992, 67.5728952772074, 65.9849418206708, 
   40.9007529089665, 50.2450376454483, 57.1964407939767, 60.5366187542779, 35.3511293634497, 31.3812457221081, 55.9863107460643, 
   52.72553045859, 38.0917180013689, 45.2101300479124, 37.7987679671458, 60.6598220396988, 35.5345653661875, 43.066392881588, 
   56.3915126625599, 30.5735797399042, 61.1827515400411, 58.299794661191, 62.3326488706366, 37.9986310746064, 33.1526351813826, 
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 4, 4, 3, 3, 3, 2, 4, 4, 4, 
   3, 3, 3, 4, 4, 3, 4, 4, 4, 4, 2, 2, 3, 4, 4, 2, 4, 2, 4, 3, 2, 3, 2, 4, 4, 4, 2, 3, 3, 3, 3, 4, 2, 1, 4, 3, 2, 3, 3, 3, 1, 
   4, 3, 3, 1, 3, 3, 3, 3, 4, 3, 1, 4, 4, 4, 3, 4, 3, 4, 4, 3, 4, 3, 4, 3, 3, 3, 2, 2, 4, 4, 2, 4, 3, 1, 2, 4, 3, 1, 4, 2, 3, 
   1, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 4, 4, 2, 3, 4, 3, 4, 2, 2, 2, 2, 3, 4, 3, 2, 2, 4, 3, 3, 2, 3, 4, 2, 3, 1, 
   3, 4, 2, 2, 2, 3, 3, 2, 4, 3, 4, 2, 4, 3, 3, 3, 2, 3, 2, 4, 3, 4, 2, 3, 3, 3, 3, 4, 3, 4, 4, 4, 2, 4, 4, 2, 2, 3, 3, 4, 2, 
   2, 3, 1, 4, 2, 2, 3, 3, 3, 3, 4, 3, 2, 4, 3, 4, 3, 2, 3, 2, 3, 4, 4, 4, 3, 4, 2, 3, 3, 3, 4, 3, 4, 3, 4, 3, 3, 4, 3, 3, 4, 
   4, 2, 4, 4, 3, 3, 3, 2, 1, 3, 4, 3, 4, 3, 4, 3, 4, 4, 2, 3, 3, 1, 3, 4, 2, 3, 4, 2, 3, 4, 4, 4, 3, 1, 3, 4, 2, 2, 3, 4, 3, 
   4, 4, 3, 4, 4, 3, 3, 4, 2, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 14.5, 1.1, 1.4, 1.8, 6.8, 2, 0.6, 3.2, 25.2, 2.8, 7.2, 1.4, 0.8, 
   1.4, 5.4, 11.4, 0.7, 10.2, 1.2, 3.4, 34.8, 2.1, 1.4, 10.4, 43.2, 34.4, 1.4, 7.2, 9.4, 3.6, 1.6, 0.8, 2.4, 0.6, 7.1, 6.6, 
   0.7, 1.1, 6.6, 5.7, 1, 3.8, 1.1, 1.6, 6, 1.3, 1.8, 2.2, 2.3, 0.8, 0.9, 1.2, 2.6, 45, 4.2, 1.2, 1.4, 2.2, 0.7, 20, 2.4, 1, 
   1.4, 8.4, 17.1, 12.2, 13.2, 6.3, 0.8, 14.4, 14.4, 4.5, 1.3, 0.8, 4.2, 5, 1.1, 1.2, 2, 1.6, 10, 1.4, 1.3, 3.2, 4, 1, 3.6, 
   4.6, 1.8, 0.9, 5, 1.1, 2.2, 1.2, 0.4, 1, 1.9, 5.5, 4, 6.7, 6.4, 1.4, 3, 6.5, 3.5, 0.6, 3.5, 2.6, 0.6, 0.6, 2.6, 1, 34.8, 
   5.6, 1.9, 3, 1.4, 0.4, 0.8, 1.1, 7.3, 2.2, 1.1, 0.9, 2, 5.8, 56, 1.4, 1.2, 14.4, 3, 0.9, 2.3, 0.5, 2.4, 1.2, 51, 1.2, 3.4, 
   5, 1.2, 4.6, 6.4, 0.3, 4, 11.4, 0.9, 2.6, 1.2, 2.6, 3, 1.6, 1.8, 3.6, 9.4, 1.4, 1, 22, 0.8, 2, 28, 0.7, 2.6, 49, 0.9, 21.6, 
   1.5, 3.7, 1.4, 0.6, 1.4, 2.1, 9.4, 1.2, 0.5, 1, 1.4, 0.6, 3.9, 1.4, 1.8, 2.4, 0.5, 1.8, 11.8, 22.8, 3.2, 3.8, 1.8, 9, 14.1, 
   1, 0.7, 1, 2.3, 1.4, 4.5, 6.6, 6.8, 0.4, 0.9, 1.8, 26, 1.5, 1.6, 0.8, 0.4, 8.8, 1.9, 16, 3.9, 1.2, 2.1, 6.1, 1.6, 1.3, 1.2, 
   0.5, 1.1, 7.1, 3.1, 1.4, 1.1, 0.5, 1.1, 6.2, 11.2, 5.6, 2.2, 6.8, 7, 0.5, 6.6, 6.4, 7.2, 1, 2, 0.5, 4.4, 2.2, 1, 2, 11.2, 
   1, 1.6, 17.9, 2.6, 2.2, 2.6, 0.8, 2, 6.4, 17.4, 4, 1.4, 3.2, 17.2, 17, 6.6, 2.4, 1.6, 1.2, 2.2, 2.4, 2, 0.7, 2, 0.5, 5.8, 
   1.2, 1.6, 0.4, 0.8, 1.7, 2, 12.8), .Dim = c(276L, 7L), .Dimnames = list(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
   "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", 
   "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", 
   "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", 
   "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", 
   "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", 
   "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", 
   "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", 
   "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", 
   "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", 
   "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", 
   "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", 
   "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", 
   "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", "255", "256", 
   "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", "271", "272", "273", "274", 
   "275", "276"), c("(Intercept)", "trt", "bili", "age", "male", "stage", "trt:bili")), assign = 0:6), y = c(`1` = 1L, `2` = 1L, 
   `3` = 0L, `4` = 1L, `5` = 1L, `6` = 0L, `7` = 0L, `8` = 1L, `9` = 1L, `10` = 1L, `11` = 1L, `12` = 0L, `13` = 0L, `14` = 0L, 
   `15` = 0L, `16` = 1L, `17` = 0L, `18` = 0L, `19` = 1L, `20` = 1L, `21` = 1L, `22` = 0L, `23` = 0L, `24` = 1L, `25` = 1L, 
   `26` = 1L, `27` = 0L, `28` = 1L, `29` = 0L, `30` = 0L, `31` = 0L, `32` = 0L, `33` = 0L, `34` = 0L, `35` = 0L, `36` = 1L, 
   `37` = 0L, `38` = 0L, `39` = 1L, `40` = 0L, `41` = 0L, `42` = 0L, `43` = 0L, `44` = 0L, `45` = 0L, `46` = 1L, `47` = 0L, 
   `48` = 1L, `49` = 0L, `50` = 1L, `51` = 0L, `52` = 0L, `53` = 0L, `54` = 1L, `55` = 0L, `56` = 0L, `57` = 0L, `58` = 0L, 
   `59` = 0L, `60` = 1L, `61` = 0L, `62` = 0L, `63` = 0L, `64` = 1L, `65` = 1L, `66` = 1L, `67` = 1L, `68` = 0L, `69` = 0L, 
   `70` = 0L, `71` = 1L, `72` = 0L, `73` = 0L, `74` = 0L, `75` = 0L, `76` = 1L, `77` = 0L, `78` = 0L, `79` = 0L, `80` = 0L, 
   `81` = 1L, `82` = 0L, `83` = 0L, `84` = 1L, `85` = 0L, `86` = 0L, `87` = 0L, `88` = 0L, `89` = 0L, `90` = 0L, `91` = 1L, 
   `92` = 0L, `93` = 0L, `94` = 0L, `95` = 0L, `96` = 0L, `97` = 1L, `98` = 0L, `99` = 1L, `100` = 1L, `101` = 0L, `102` = 1L, 
   `103` = 1L, `104` = 1L, `105` = 0L, `106` = 1L, `107` = 0L, `108` = 0L, `109` = 0L, `110` = 0L, `111` = 0L, `112` = 0L, `113` = 1L, 
   `114` = 1L, `115` = 0L, `116` = 0L, `117` = 0L, `118` = 0L, `119` = 0L, `120` = 0L, `121` = 0L, `122` = 0L, `123` = 0L, `124` = 0L, 
   `125` = 0L, `126` = 0L, `127` = 0L, `128` = 1L, `129` = 0L, `130` = 0L, `131` = 1L, `132` = 0L, `133` = 0L, `134` = 0L, `135` = 1L, 
   `136` = 1L, `137` = 0L, `138` = 0L, `139` = 0L, `140` = 0L, `141` = 0L, `142` = 0L, `143` = 1L, `144` = 0L, `145` = 0L, `146` = 0L, 
   `147` = 0L, `148` = 0L, `149` = 0L, `150` = 1L, `151` = 1L, `152` = 0L, `153` = 0L, `154` = 0L, `155` = 0L, `156` = 1L, `157` = 0L, 
   `158` = 0L, `159` = 0L, `160` = 1L, `161` = 0L, `162` = 0L, `163` = 0L, `164` = 1L, `165` = 0L, `166` = 0L, `167` = 0L, `168` = 0L, 
   `169` = 1L, `170` = 0L, `171` = 1L, `172` = 0L, `173` = 1L, `174` = 0L, `175` = 0L, `176` = 0L, `177` = 0L, `178` = 0L, `179` = 0L, 
   `180` = 1L, `181` = 0L, `182` = 0L, `183` = 1L, `184` = 0L, `185` = 0L, `186` = 0L, `187` = 0L, `188` = 1L, `189` = 0L, `190` = 0L, 
   `191` = 0L, `192` = 0L, `193` = 0L, `194` = 0L, `195` = 0L, `196` = 0L, `197` = 0L, `198` = 1L, `199` = 1L, `200` = 0L, `201` = 1L, 
   `202` = 0L, `203` = 0L, `204` = 1L, `205` = 0L, `206` = 1L, `207` = 0L, `208` = 1L, `209` = 0L, `210` = 0L, `211` = 1L, `212` = 0L, 
   `213` = 0L, `214` = 0L, `215` = 0L, `216` = 1L, `217` = 0L, `218` = 0L, `219` = 1L, `220` = 1L, `221` = 1L, `222` = 1L, `223` = 0L, 
   `224` = 0L, `225` = 0L, `226` = 0L, `227` = 0L, `228` = 0L, `229` = 1L, `230` = 1L, `231` = 0L, `232` = 0L, `233` = 1L, `234` = 0L, 
   `235` = 0L, `236` = 1L, `237` = 0L, `238` = 0L, `239` = 1L, `240` = 0L, `241` = 0L, `242` = 0L, `243` = 0L, `244` = 0L, `245` = 0L, 
   `246` = 0L, `247` = 0L, `248` = 0L, `249` = 0L, `250` = 0L, `251` = 1L, `252` = 1L, `253` = 0L, `254` = 0L, `255` = 0L, `256` = 0L, 
   `257` = 0L, `258` = 1L, `259` = 0L, `260` = 0L, `261` = 0L, `262` = 0L, `263` = 0L, `264` = 0L, `265` = 0L, `266` = 0L, `267` = 1L, 
   `268` = 0L, `269` = 1L, `270` = 0L, `271` = 0L, `272` = 0L, `273` = 0L, `274` = 0L, `275` = 0L, `276` = 1L), weights = NULL, 
       start = NULL, etastart = NULL, mustart = NULL, offset = NULL, family = structure(list(family = "binomial", link = "log", 
           linkfun = function (mu) 
           log(mu), linkinv = function (eta) 
           pmax(exp(eta), .Machine$double.eps), variance = function (mu) 
           mu * (1 - mu), dev.resids = function (y, mu, wt) 
           .Call(C_binomial_dev_resids, y, mu, wt), aic = function (y, n, mu, wt, dev) 
           {
               m <- if (any(n > 1)) 
                   n
               else wt
               -2 * sum(ifelse(m > 0, (wt/m), 0) * dbinom(round(m * y), round(m), mu, log = TRUE))
           }, mu.eta = function (eta) 
           pmax(exp(eta), .Machine$double.eps), initialize = expression({
               if (NCOL(y) == 1) {
                   if (is.factor(y)) 
                     y <- y != levels(y)[1L]
                   n <- rep.int(1, nobs)
                   y[weights == 0] <- 0
                   if (any(y < 0 | y > 1)) 
                     stop("y values must be 0 <= y <= 1")
                   mustart <- (weights * y + 0.5)/(weights + 1)
                   m <- weights * y
                   if (any(abs(m - round(m)) > 0.001)) 
                     warning("non-integer #successes in a binomial glm!")
               }
               else if (NCOL(y) == 2) {
                   if (any(abs(y - round(y)) > 0.001)) 
                     warning("non-integer counts in a binomial glm!")
                   n <- y[, 1] + y[, 2]
                   y <- ifelse(n == 0, 0, y[, 1]/n)
                   weights <- weights * n
                   mustart <- (n * y + 0.5)/(n + 1)
               }
               else stop("for the 'binomial' family, y must be a vector of 0 and 1's\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures")
           }), validmu = function (mu) 
           all(is.finite(mu)) && all(mu > 0 & mu < 1), valideta = function (eta) 
           TRUE, simulate = function (object, nsim) 
           {
               ftd <- fitted(object)
               n <- length(ftd)
               ntot <- n * nsim
               wts <- object$prior.weights
               if (any(wts%%1 != 0)) 
                   stop("cannot simulate from non-integer prior.weights")
               if (!is.null(m <- object$model)) {
                   y <- model.response(m)
                   if (is.factor(y)) {
                     yy <- factor(1 + rbinom(ntot, size = 1, prob = ftd), labels = levels(y))
                     split(yy, rep(seq_len(nsim), each = n))
                   }
                   else if (is.matrix(y) && ncol(y) == 2) {
                     yy <- vector("list", nsim)
                     for (i in seq_len(nsim)) {
                       Y <- rbinom(n, size = wts, prob = ftd)
                       YY <- cbind(Y, wts - Y)
                       colnames(YY) <- colnames(y)
                       yy[[i]] <- YY
                     }
                     yy
                   }
                   else rbinom(ntot, size = wts, prob = ftd)/wts
               }
               else rbinom(ntot, size = wts, prob = ftd)/wts
           }), class = "family"), control = list(epsilon = 0.00000001, maxit = 25, trace = FALSE), intercept = TRUE, singular.ok = TRUE)
8: stop("no valid set of coefficients has been found: please supply starting values", call. = FALSE)

test-06_calc_myreg_helpers_coef.R:472: failure: theta_hat for yreg survCox: extracts coef correctly when there is no interaction (add zero)
theta_hat(...) not equal to ref_coef[vars].
Names: 'is.NA' value mismatch: 1 in current 0 in target

test-06_calc_myreg_helpers_coef.R:497: failure: theta_hat for yreg survCox: extracts coef correctly when there is an interaction
theta_hat(...) not equal to coef(yreg_fit3)[vars].
Names: 'is.NA' value mismatch: 1 in current 0 in target

test-06_calc_myreg_helpers_coef.R:536: failure: theta_hat for yreg survAFT_exp: extracts coef correctly when there is no interaction (add zero)
`%>%`(...) not equal to length(coef(yreg_fit3)) + 2.
1/1 mismatches
[1] 7 - 8 == -1

test-06_calc_myreg_helpers_coef.R:561: failure: theta_hat for yreg survAFT_exp: extracts coef correctly when there is an interaction
`%>%`(...) not equal to length(coef(yreg_fit3)) + 1.
1/1 mismatches
[1] 7 - 8 == -1

test-06_calc_myreg_helpers_coef.R:593: failure: theta_hat for yreg survAFT_weibull: extracts coef correctly when there is no interaction (add zero)
`%>%`(...) not equal to length(coef(yreg_fit3)) + 2.
1/1 mismatches
[1] 7 - 8 == -1

test-06_calc_myreg_helpers_coef.R:618: failure: theta_hat for yreg survAFT_weibull: extracts coef correctly when there is an interaction
`%>%`(...) not equal to length(coef(yreg_fit3)) + 1.
1/1 mismatches
[1] 7 - 8 == -1
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 06_calc_myreg_helpers_vcov⠙ |  14 8     | 06_calc_myreg_helpers_vcov✖ |  14 12     | 06_calc_myreg_helpers_vcov [0.1 s]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-06_calc_myreg_helpers_vcov.R:115: error: Sigma_theta_hat for yreg linear: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:115
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:173: error: Sigma_theta_hat for yreg logistic: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:173
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:217: error: Sigma_theta_hat for yreg loglinear: extracts vcov correctly when there is no interaction
no valid set of coefficients has been found: please supply starting values
1: fit_yreg(yreg = "loglinear", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = c("age", "male", "stage"), 
       interaction = FALSE, eventvar = NULL) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:217
2: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data))) at /inv/kyoshida/cantos_stats/regmedint/R/04_fit_yreg_outcome_modeling.R:77
3: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data)))
4: glm(formula = spiders ~ trt + bili + age + male + stage, family = binomial(link = "log"), data = data)
5: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
6: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
7: glm.fit(x = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 
   1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 
   2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
   1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 
   1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 14.5, 1.1, 1.4, 1.8, 3.4, 1, 0.3, 3.2, 12.6, 
   1.4, 3.6, 0.7, 0.8, 0.7, 2.7, 11.4, 0.7, 5.1, 0.6, 3.4, 17.4, 2.1, 0.7, 5.2, 21.6, 17.2, 0.7, 3.6, 4.7, 1.8, 0.8, 0.8, 1.2, 
   0.3, 7.1, 3.3, 0.7, 1.1, 3.3, 5.7, 0.5, 1.9, 1.1, 0.8, 6, 1.3, 1.8, 1.1, 2.3, 0.8, 0.9, 0.6, 1.3, 22.5, 2.1, 1.2, 1.4, 1.1, 
   0.7, 20, 1.2, 0.5, 0.7, 8.4, 17.1, 12.2, 6.6, 6.3, 0.8, 7.2, 14.4, 4.5, 1.3, 0.4, 2.1, 5, 1.1, 0.6, 2, 1.6, 5, 1.4, 1.3, 
   3.2, 2, 1, 1.8, 2.3, 0.9, 0.9, 2.5, 1.1, 1.1, 0.6, 0.4, 0.5, 1.9, 5.5, 2, 6.7, 3.2, 0.7, 3, 6.5, 3.5, 0.6, 3.5, 1.3, 0.6, 
   0.6, 1.3, 0.5, 17.4, 2.8, 1.9, 1.5, 0.7, 0.4, 0.8, 1.1, 7.3, 1.1, 1.1, 0.9, 1, 2.9, 28, 0.7, 1.2, 7.2, 3, 0.9, 2.3, 0.5, 
   2.4, 0.6, 25.5, 0.6, 3.4, 2.5, 0.6, 2.3, 3.2, 0.3, 4, 5.7, 0.9, 1.3, 1.2, 1.3, 3, 0.8, 0.9, 1.8, 4.7, 1.4, 0.5, 11, 0.8, 
   2, 14, 0.7, 1.3, 24.5, 0.9, 10.8, 1.5, 3.7, 1.4, 0.6, 0.7, 2.1, 4.7, 0.6, 0.5, 0.5, 0.7, 0.6, 3.9, 0.7, 0.9, 1.2, 0.5, 0.9, 
   5.9, 11.4, 1.6, 3.8, 0.9, 4.5, 14.1, 1, 0.7, 0.5, 2.3, 0.7, 4.5, 3.3, 3.4, 0.4, 0.9, 0.9, 13, 1.5, 1.6, 0.8, 0.4, 4.4, 1.9, 
   8, 3.9, 0.6, 2.1, 6.1, 0.8, 1.3, 0.6, 0.5, 1.1, 7.1, 3.1, 0.7, 1.1, 0.5, 1.1, 3.1, 5.6, 2.8, 1.1, 3.4, 3.5, 0.5, 6.6, 6.4, 
   3.6, 1, 1, 0.5, 2.2, 2.2, 1, 1, 5.6, 0.5, 1.6, 17.9, 1.3, 1.1, 1.3, 0.8, 2, 6.4, 8.7, 4, 1.4, 3.2, 8.6, 8.5, 6.6, 2.4, 0.8, 
   1.2, 1.1, 2.4, 1, 0.7, 1, 0.5, 2.9, 0.6, 0.8, 0.4, 0.4, 1.7, 2, 6.4, 58.7652292950034, 56.4462696783025, 70.072553045859, 
   54.7405886379192, 38.1054072553046, 55.5345653661875, 53.056810403833, 42.507871321013, 70.5598904859685, 53.7138945927447, 
   59.1375770020534, 45.6892539356605, 64.6461327857632, 40.4435318275154, 52.1834360027378, 53.9301848049281, 49.5605749486653, 
   59.9534565366188, 64.1889117043121, 56.2765229295003, 55.9671457905544, 44.5201916495551, 45.0732375085558, 52.0246406570842, 
   54.4394250513347, 44.9472963723477, 63.8767967145791, 41.3853524982888, 41.5523613963039, 53.9958932238193, 51.2826830937714, 
   52.0602327173169, 48.6187542778919, 56.4106776180698, 61.7275838466804, 36.6269678302532, 55.3921971252567, 48.870636550308, 
   37.5824777549624, 45.7987679671458, 47.4277891854894, 49.1362080766598, 53.5085557837098, 52.0876112251882, 50.5407255304586, 
   39.1978097193703, 65.7631759069131, 33.6180698151951, 53.5715263518138, 40.394250513347, 58.3819301848049, 43.8986995208761, 
   60.7063655030801, 46.6283367556468, 62.9075975359343, 40.2026009582478, 46.4531143052704, 51.2881587953457, 32.6132785763176, 
   49.3388090349076, 48.8459958932238, 32.4928131416838, 38.4941820670773, 51.9206023271732, 43.5181382614647, 51.9425051334702, 
   49.8261464750171, 47.9452429842574, 46.5160848733744, 67.4113620807666, 63.2635181382615, 67.3100616016427, 56.0136892539357, 
   55.8302532511978, 47.2169746748802, 52.7583846680356, 37.2785763175907, 41.3935660506502, 52.4435318275154, 33.4757015742642, 
   45.6071184120465, 76.7091033538672, 36.5338809034908, 53.9164955509925, 71.8932238193019, 28.8843258042437, 48.4681724845996, 
   51.4688569472964, 44.9500342231348, 56.5694729637235, 48.9637234770705, 43.0171115674196, 34.0396988364134, 62.5215605749487, 
   50.3572895277207, 44.062970568104, 38.9103353867214, 41.1526351813826, 55.4579055441478, 51.233401779603, 52.8268309377139, 
   42.6392881587953, 61.0704996577687, 49.6563997262149, 48.8542094455852, 54.2559890485969, 35.1512662559891, 67.9069130732375, 
   55.4360027378508, 52.8898015058179, 47.1813826146475, 44.104038329911, 44.227241615332, 62.0013689253936, 40.5530458590007, 
   62.6447638603696, 42.3353867214237, 42.9678302532512, 55.9616700889801, 62.861054072553, 51.2498288843258, 46.7624914442163, 
   54.0752908966461, 47.0362765229295, 55.7262149212868, 46.1026694045175, 52.2874743326489, 51.2005475701574, 75.0116358658453, 
   30.8637919233402, 61.8042436687201, 55.0417522245038, 69.9411362080767, 49.6043805612594, 69.3771389459274, 43.5564681724846, 
   59.4086242299795, 48.7583846680356, 36.4928131416838, 45.7604380561259, 57.3716632443532, 42.7433264887064, 58.8172484599589, 
   53.4976043805613, 53.305954825462, 41.3552361396304, 60.9582477754962, 35.4907597535934, 48.662559890486, 49.8699520876112, 
   30.2751540041068, 52.1533196440794, 55.4524298425736, 43.9425051334702, 42.5681040383299, 44.5694729637235, 40.2600958247776, 
   37.6071184120465, 48.3613963039014, 70.8364134154689, 35.791923340178, 62.6228610540726, 50.6475017111567, 52.6926762491444, 
   52.7200547570157, 56.7720739219713, 44.3969883641342, 29.555099247091, 57.0403832991102, 44.6269678302532, 35.7973990417522, 
   40.7173169062286, 32.2327173169062, 41.0924024640657, 61.6399726214921, 37.056810403833, 62.5790554414784, 61.990417522245, 
   61.2950034223135, 52.6242299794661, 49.7631759069131, 47.2635181382615, 50.2039698836413, 69.347022587269, 41.1690622861054, 
   36.0793976728268, 42.7132101300479, 63.6303901437372, 56.6297056810404, 46.2642026009582, 61.242984257358, 38.6201232032854, 
   38.7707049965777, 56.6954140999316, 58.9514031485284, 36.9226557152635, 62.4147843942505, 34.6091718001369, 58.3353867214237, 
   50.1820670773443, 42.6858316221766, 34.3791923340178, 33.1827515400411, 38.3819301848049, 59.7618069815195, 46.7898699520876, 
   56.0793976728268, 41.3744010951403, 64.5722108145106, 67.4880219028063, 44.829568788501, 45.7713894592745, 32.9500342231348, 
   41.2210814510609, 55.4168377823409, 47.9808350444901, 40.7912388774812, 56.974674880219, 68.4626967830253, 78.4394250513347, 
   39.8576317590691, 35.3100616016427, 31.4442162902122, 58.2642026009582, 51.4880219028063, 59.9698836413415, 74.5242984257358, 
   42.7871321013005, 34.8747433264887, 44.1396303901437, 46.3819301848049, 56.3093771389459, 70.9075975359343, 55.3949349760438, 
   45.0841889117043, 26.2778918548939, 50.4722792607803, 38.3983572895277, 47.419575633128, 38.3162217659138, 50.1081451060917, 
   35.088295687885, 32.5037645448323, 56.1533196440794, 46.154688569473, 65.8836413415469, 33.9438740588638, 62.861054072553, 
   48.5639972621492, 46.3490759753593, 38.8528405201916, 58.6475017111567, 48.9363449691992, 67.5728952772074, 65.9849418206708, 
   40.9007529089665, 50.2450376454483, 57.1964407939767, 60.5366187542779, 35.3511293634497, 31.3812457221081, 55.9863107460643, 
   52.72553045859, 38.0917180013689, 45.2101300479124, 37.7987679671458, 60.6598220396988, 35.5345653661875, 43.066392881588, 
   56.3915126625599, 30.5735797399042, 61.1827515400411, 58.299794661191, 62.3326488706366, 37.9986310746064, 33.1526351813826, 
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 4, 4, 3, 3, 3, 2, 4, 4, 4, 
   3, 3, 3, 4, 4, 3, 4, 4, 4, 4, 2, 2, 3, 4, 4, 2, 4, 2, 4, 3, 2, 3, 2, 4, 4, 4, 2, 3, 3, 3, 3, 4, 2, 1, 4, 3, 2, 3, 3, 3, 1, 
   4, 3, 3, 1, 3, 3, 3, 3, 4, 3, 1, 4, 4, 4, 3, 4, 3, 4, 4, 3, 4, 3, 4, 3, 3, 3, 2, 2, 4, 4, 2, 4, 3, 1, 2, 4, 3, 1, 4, 2, 3, 
   1, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 4, 4, 2, 3, 4, 3, 4, 2, 2, 2, 2, 3, 4, 3, 2, 2, 4, 3, 3, 2, 3, 4, 2, 3, 1, 
   3, 4, 2, 2, 2, 3, 3, 2, 4, 3, 4, 2, 4, 3, 3, 3, 2, 3, 2, 4, 3, 4, 2, 3, 3, 3, 3, 4, 3, 4, 4, 4, 2, 4, 4, 2, 2, 3, 3, 4, 2, 
   2, 3, 1, 4, 2, 2, 3, 3, 3, 3, 4, 3, 2, 4, 3, 4, 3, 2, 3, 2, 3, 4, 4, 4, 3, 4, 2, 3, 3, 3, 4, 3, 4, 3, 4, 3, 3, 4, 3, 3, 4, 
   4, 2, 4, 4, 3, 3, 3, 2, 1, 3, 4, 3, 4, 3, 4, 3, 4, 4, 2, 3, 3, 1, 3, 4, 2, 3, 4, 2, 3, 4, 4, 4, 3, 1, 3, 4, 2, 2, 3, 4, 3, 
   4, 4, 3, 4, 4, 3, 3, 4, 2, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2), .Dim = c(276L, 6L), .Dimnames = list(c("1", "2", "3", "4", "5", 
   "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", 
   "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", 
   "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", 
   "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", 
   "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", 
   "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", 
   "127", "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", 
   "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", 
   "163", "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", 
   "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", 
   "199", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", 
   "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", 
   "235", "236", "237", "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", 
   "253", "254", "255", "256", "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", 
   "271", "272", "273", "274", "275", "276"), c("(Intercept)", "trt", "bili", "age", "male", "stage")), assign = 0:5), y = c(`1` = 1L, 
   `2` = 1L, `3` = 0L, `4` = 1L, `5` = 1L, `6` = 0L, `7` = 0L, `8` = 1L, `9` = 1L, `10` = 1L, `11` = 1L, `12` = 0L, `13` = 0L, 
   `14` = 0L, `15` = 0L, `16` = 1L, `17` = 0L, `18` = 0L, `19` = 1L, `20` = 1L, `21` = 1L, `22` = 0L, `23` = 0L, `24` = 1L, 
   `25` = 1L, `26` = 1L, `27` = 0L, `28` = 1L, `29` = 0L, `30` = 0L, `31` = 0L, `32` = 0L, `33` = 0L, `34` = 0L, `35` = 0L, 
   `36` = 1L, `37` = 0L, `38` = 0L, `39` = 1L, `40` = 0L, `41` = 0L, `42` = 0L, `43` = 0L, `44` = 0L, `45` = 0L, `46` = 1L, 
   `47` = 0L, `48` = 1L, `49` = 0L, `50` = 1L, `51` = 0L, `52` = 0L, `53` = 0L, `54` = 1L, `55` = 0L, `56` = 0L, `57` = 0L, 
   `58` = 0L, `59` = 0L, `60` = 1L, `61` = 0L, `62` = 0L, `63` = 0L, `64` = 1L, `65` = 1L, `66` = 1L, `67` = 1L, `68` = 0L, 
   `69` = 0L, `70` = 0L, `71` = 1L, `72` = 0L, `73` = 0L, `74` = 0L, `75` = 0L, `76` = 1L, `77` = 0L, `78` = 0L, `79` = 0L, 
   `80` = 0L, `81` = 1L, `82` = 0L, `83` = 0L, `84` = 1L, `85` = 0L, `86` = 0L, `87` = 0L, `88` = 0L, `89` = 0L, `90` = 0L, 
   `91` = 1L, `92` = 0L, `93` = 0L, `94` = 0L, `95` = 0L, `96` = 0L, `97` = 1L, `98` = 0L, `99` = 1L, `100` = 1L, `101` = 0L, 
   `102` = 1L, `103` = 1L, `104` = 1L, `105` = 0L, `106` = 1L, `107` = 0L, `108` = 0L, `109` = 0L, `110` = 0L, `111` = 0L, `112` = 0L, 
   `113` = 1L, `114` = 1L, `115` = 0L, `116` = 0L, `117` = 0L, `118` = 0L, `119` = 0L, `120` = 0L, `121` = 0L, `122` = 0L, `123` = 0L, 
   `124` = 0L, `125` = 0L, `126` = 0L, `127` = 0L, `128` = 1L, `129` = 0L, `130` = 0L, `131` = 1L, `132` = 0L, `133` = 0L, `134` = 0L, 
   `135` = 1L, `136` = 1L, `137` = 0L, `138` = 0L, `139` = 0L, `140` = 0L, `141` = 0L, `142` = 0L, `143` = 1L, `144` = 0L, `145` = 0L, 
   `146` = 0L, `147` = 0L, `148` = 0L, `149` = 0L, `150` = 1L, `151` = 1L, `152` = 0L, `153` = 0L, `154` = 0L, `155` = 0L, `156` = 1L, 
   `157` = 0L, `158` = 0L, `159` = 0L, `160` = 1L, `161` = 0L, `162` = 0L, `163` = 0L, `164` = 1L, `165` = 0L, `166` = 0L, `167` = 0L, 
   `168` = 0L, `169` = 1L, `170` = 0L, `171` = 1L, `172` = 0L, `173` = 1L, `174` = 0L, `175` = 0L, `176` = 0L, `177` = 0L, `178` = 0L, 
   `179` = 0L, `180` = 1L, `181` = 0L, `182` = 0L, `183` = 1L, `184` = 0L, `185` = 0L, `186` = 0L, `187` = 0L, `188` = 1L, `189` = 0L, 
   `190` = 0L, `191` = 0L, `192` = 0L, `193` = 0L, `194` = 0L, `195` = 0L, `196` = 0L, `197` = 0L, `198` = 1L, `199` = 1L, `200` = 0L, 
   `201` = 1L, `202` = 0L, `203` = 0L, `204` = 1L, `205` = 0L, `206` = 1L, `207` = 0L, `208` = 1L, `209` = 0L, `210` = 0L, `211` = 1L, 
   `212` = 0L, `213` = 0L, `214` = 0L, `215` = 0L, `216` = 1L, `217` = 0L, `218` = 0L, `219` = 1L, `220` = 1L, `221` = 1L, `222` = 1L, 
   `223` = 0L, `224` = 0L, `225` = 0L, `226` = 0L, `227` = 0L, `228` = 0L, `229` = 1L, `230` = 1L, `231` = 0L, `232` = 0L, `233` = 1L, 
   `234` = 0L, `235` = 0L, `236` = 1L, `237` = 0L, `238` = 0L, `239` = 1L, `240` = 0L, `241` = 0L, `242` = 0L, `243` = 0L, `244` = 0L, 
   `245` = 0L, `246` = 0L, `247` = 0L, `248` = 0L, `249` = 0L, `250` = 0L, `251` = 1L, `252` = 1L, `253` = 0L, `254` = 0L, `255` = 0L, 
   `256` = 0L, `257` = 0L, `258` = 1L, `259` = 0L, `260` = 0L, `261` = 0L, `262` = 0L, `263` = 0L, `264` = 0L, `265` = 0L, `266` = 0L, 
   `267` = 1L, `268` = 0L, `269` = 1L, `270` = 0L, `271` = 0L, `272` = 0L, `273` = 0L, `274` = 0L, `275` = 0L, `276` = 1L), 
       weights = NULL, start = NULL, etastart = NULL, mustart = NULL, offset = NULL, family = structure(list(family = "binomial", 
           link = "log", linkfun = function (mu) 
           log(mu), linkinv = function (eta) 
           pmax(exp(eta), .Machine$double.eps), variance = function (mu) 
           mu * (1 - mu), dev.resids = function (y, mu, wt) 
           .Call(C_binomial_dev_resids, y, mu, wt), aic = function (y, n, mu, wt, dev) 
           {
               m <- if (any(n > 1)) 
                   n
               else wt
               -2 * sum(ifelse(m > 0, (wt/m), 0) * dbinom(round(m * y), round(m), mu, log = TRUE))
           }, mu.eta = function (eta) 
           pmax(exp(eta), .Machine$double.eps), initialize = expression({
               if (NCOL(y) == 1) {
                   if (is.factor(y)) 
                     y <- y != levels(y)[1L]
                   n <- rep.int(1, nobs)
                   y[weights == 0] <- 0
                   if (any(y < 0 | y > 1)) 
                     stop("y values must be 0 <= y <= 1")
                   mustart <- (weights * y + 0.5)/(weights + 1)
                   m <- weights * y
                   if (any(abs(m - round(m)) > 0.001)) 
                     warning("non-integer #successes in a binomial glm!")
               }
               else if (NCOL(y) == 2) {
                   if (any(abs(y - round(y)) > 0.001)) 
                     warning("non-integer counts in a binomial glm!")
                   n <- y[, 1] + y[, 2]
                   y <- ifelse(n == 0, 0, y[, 1]/n)
                   weights <- weights * n
                   mustart <- (n * y + 0.5)/(n + 1)
               }
               else stop("for the 'binomial' family, y must be a vector of 0 and 1's\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures")
           }), validmu = function (mu) 
           all(is.finite(mu)) && all(mu > 0 & mu < 1), valideta = function (eta) 
           TRUE, simulate = function (object, nsim) 
           {
               ftd <- fitted(object)
               n <- length(ftd)
               ntot <- n * nsim
               wts <- object$prior.weights
               if (any(wts%%1 != 0)) 
                   stop("cannot simulate from non-integer prior.weights")
               if (!is.null(m <- object$model)) {
                   y <- model.response(m)
                   if (is.factor(y)) {
                     yy <- factor(1 + rbinom(ntot, size = 1, prob = ftd), labels = levels(y))
                     split(yy, rep(seq_len(nsim), each = n))
                   }
                   else if (is.matrix(y) && ncol(y) == 2) {
                     yy <- vector("list", nsim)
                     for (i in seq_len(nsim)) {
                       Y <- rbinom(n, size = wts, prob = ftd)
                       YY <- cbind(Y, wts - Y)
                       colnames(YY) <- colnames(y)
                       yy[[i]] <- YY
                     }
                     yy
                   }
                   else rbinom(ntot, size = wts, prob = ftd)/wts
               }
               else rbinom(ntot, size = wts, prob = ftd)/wts
           }), class = "family"), control = list(epsilon = 0.00000001, maxit = 25, trace = FALSE), intercept = TRUE, singular.ok = TRUE)
8: stop("no valid set of coefficients has been found: please supply starting values", call. = FALSE)

test-06_calc_myreg_helpers_vcov.R:248: error: Sigma_theta_hat for yreg loglinear: extracts vcov correctly when there is an interaction
no valid set of coefficients has been found: please supply starting values
1: fit_yreg(yreg = "loglinear", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = c("age", "male", "stage"), 
       interaction = TRUE, eventvar = NULL) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:248
2: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data))) at /inv/kyoshida/cantos_stats/regmedint/R/04_fit_yreg_outcome_modeling.R:77
3: eval(bquote(glm(formula = .(as.formula(string_formula)), family = binomial(link = "log"), data = data)))
4: glm(formula = spiders ~ trt * bili + age + male + stage, family = binomial(link = "log"), data = data)
5: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
6: eval(call(if (is.function(method)) "method" else method, x = X, y = Y, weights = weights, start = start, etastart = etastart, 
       mustart = mustart, offset = offset, family = family, control = control, intercept = attr(mt, "intercept") > 0L, singular.ok = singular.ok))
7: glm.fit(x = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 
   1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 
   2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 
   1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 
   1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 
   1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 14.5, 1.1, 1.4, 1.8, 3.4, 1, 0.3, 3.2, 12.6, 
   1.4, 3.6, 0.7, 0.8, 0.7, 2.7, 11.4, 0.7, 5.1, 0.6, 3.4, 17.4, 2.1, 0.7, 5.2, 21.6, 17.2, 0.7, 3.6, 4.7, 1.8, 0.8, 0.8, 1.2, 
   0.3, 7.1, 3.3, 0.7, 1.1, 3.3, 5.7, 0.5, 1.9, 1.1, 0.8, 6, 1.3, 1.8, 1.1, 2.3, 0.8, 0.9, 0.6, 1.3, 22.5, 2.1, 1.2, 1.4, 1.1, 
   0.7, 20, 1.2, 0.5, 0.7, 8.4, 17.1, 12.2, 6.6, 6.3, 0.8, 7.2, 14.4, 4.5, 1.3, 0.4, 2.1, 5, 1.1, 0.6, 2, 1.6, 5, 1.4, 1.3, 
   3.2, 2, 1, 1.8, 2.3, 0.9, 0.9, 2.5, 1.1, 1.1, 0.6, 0.4, 0.5, 1.9, 5.5, 2, 6.7, 3.2, 0.7, 3, 6.5, 3.5, 0.6, 3.5, 1.3, 0.6, 
   0.6, 1.3, 0.5, 17.4, 2.8, 1.9, 1.5, 0.7, 0.4, 0.8, 1.1, 7.3, 1.1, 1.1, 0.9, 1, 2.9, 28, 0.7, 1.2, 7.2, 3, 0.9, 2.3, 0.5, 
   2.4, 0.6, 25.5, 0.6, 3.4, 2.5, 0.6, 2.3, 3.2, 0.3, 4, 5.7, 0.9, 1.3, 1.2, 1.3, 3, 0.8, 0.9, 1.8, 4.7, 1.4, 0.5, 11, 0.8, 
   2, 14, 0.7, 1.3, 24.5, 0.9, 10.8, 1.5, 3.7, 1.4, 0.6, 0.7, 2.1, 4.7, 0.6, 0.5, 0.5, 0.7, 0.6, 3.9, 0.7, 0.9, 1.2, 0.5, 0.9, 
   5.9, 11.4, 1.6, 3.8, 0.9, 4.5, 14.1, 1, 0.7, 0.5, 2.3, 0.7, 4.5, 3.3, 3.4, 0.4, 0.9, 0.9, 13, 1.5, 1.6, 0.8, 0.4, 4.4, 1.9, 
   8, 3.9, 0.6, 2.1, 6.1, 0.8, 1.3, 0.6, 0.5, 1.1, 7.1, 3.1, 0.7, 1.1, 0.5, 1.1, 3.1, 5.6, 2.8, 1.1, 3.4, 3.5, 0.5, 6.6, 6.4, 
   3.6, 1, 1, 0.5, 2.2, 2.2, 1, 1, 5.6, 0.5, 1.6, 17.9, 1.3, 1.1, 1.3, 0.8, 2, 6.4, 8.7, 4, 1.4, 3.2, 8.6, 8.5, 6.6, 2.4, 0.8, 
   1.2, 1.1, 2.4, 1, 0.7, 1, 0.5, 2.9, 0.6, 0.8, 0.4, 0.4, 1.7, 2, 6.4, 58.7652292950034, 56.4462696783025, 70.072553045859, 
   54.7405886379192, 38.1054072553046, 55.5345653661875, 53.056810403833, 42.507871321013, 70.5598904859685, 53.7138945927447, 
   59.1375770020534, 45.6892539356605, 64.6461327857632, 40.4435318275154, 52.1834360027378, 53.9301848049281, 49.5605749486653, 
   59.9534565366188, 64.1889117043121, 56.2765229295003, 55.9671457905544, 44.5201916495551, 45.0732375085558, 52.0246406570842, 
   54.4394250513347, 44.9472963723477, 63.8767967145791, 41.3853524982888, 41.5523613963039, 53.9958932238193, 51.2826830937714, 
   52.0602327173169, 48.6187542778919, 56.4106776180698, 61.7275838466804, 36.6269678302532, 55.3921971252567, 48.870636550308, 
   37.5824777549624, 45.7987679671458, 47.4277891854894, 49.1362080766598, 53.5085557837098, 52.0876112251882, 50.5407255304586, 
   39.1978097193703, 65.7631759069131, 33.6180698151951, 53.5715263518138, 40.394250513347, 58.3819301848049, 43.8986995208761, 
   60.7063655030801, 46.6283367556468, 62.9075975359343, 40.2026009582478, 46.4531143052704, 51.2881587953457, 32.6132785763176, 
   49.3388090349076, 48.8459958932238, 32.4928131416838, 38.4941820670773, 51.9206023271732, 43.5181382614647, 51.9425051334702, 
   49.8261464750171, 47.9452429842574, 46.5160848733744, 67.4113620807666, 63.2635181382615, 67.3100616016427, 56.0136892539357, 
   55.8302532511978, 47.2169746748802, 52.7583846680356, 37.2785763175907, 41.3935660506502, 52.4435318275154, 33.4757015742642, 
   45.6071184120465, 76.7091033538672, 36.5338809034908, 53.9164955509925, 71.8932238193019, 28.8843258042437, 48.4681724845996, 
   51.4688569472964, 44.9500342231348, 56.5694729637235, 48.9637234770705, 43.0171115674196, 34.0396988364134, 62.5215605749487, 
   50.3572895277207, 44.062970568104, 38.9103353867214, 41.1526351813826, 55.4579055441478, 51.233401779603, 52.8268309377139, 
   42.6392881587953, 61.0704996577687, 49.6563997262149, 48.8542094455852, 54.2559890485969, 35.1512662559891, 67.9069130732375, 
   55.4360027378508, 52.8898015058179, 47.1813826146475, 44.104038329911, 44.227241615332, 62.0013689253936, 40.5530458590007, 
   62.6447638603696, 42.3353867214237, 42.9678302532512, 55.9616700889801, 62.861054072553, 51.2498288843258, 46.7624914442163, 
   54.0752908966461, 47.0362765229295, 55.7262149212868, 46.1026694045175, 52.2874743326489, 51.2005475701574, 75.0116358658453, 
   30.8637919233402, 61.8042436687201, 55.0417522245038, 69.9411362080767, 49.6043805612594, 69.3771389459274, 43.5564681724846, 
   59.4086242299795, 48.7583846680356, 36.4928131416838, 45.7604380561259, 57.3716632443532, 42.7433264887064, 58.8172484599589, 
   53.4976043805613, 53.305954825462, 41.3552361396304, 60.9582477754962, 35.4907597535934, 48.662559890486, 49.8699520876112, 
   30.2751540041068, 52.1533196440794, 55.4524298425736, 43.9425051334702, 42.5681040383299, 44.5694729637235, 40.2600958247776, 
   37.6071184120465, 48.3613963039014, 70.8364134154689, 35.791923340178, 62.6228610540726, 50.6475017111567, 52.6926762491444, 
   52.7200547570157, 56.7720739219713, 44.3969883641342, 29.555099247091, 57.0403832991102, 44.6269678302532, 35.7973990417522, 
   40.7173169062286, 32.2327173169062, 41.0924024640657, 61.6399726214921, 37.056810403833, 62.5790554414784, 61.990417522245, 
   61.2950034223135, 52.6242299794661, 49.7631759069131, 47.2635181382615, 50.2039698836413, 69.347022587269, 41.1690622861054, 
   36.0793976728268, 42.7132101300479, 63.6303901437372, 56.6297056810404, 46.2642026009582, 61.242984257358, 38.6201232032854, 
   38.7707049965777, 56.6954140999316, 58.9514031485284, 36.9226557152635, 62.4147843942505, 34.6091718001369, 58.3353867214237, 
   50.1820670773443, 42.6858316221766, 34.3791923340178, 33.1827515400411, 38.3819301848049, 59.7618069815195, 46.7898699520876, 
   56.0793976728268, 41.3744010951403, 64.5722108145106, 67.4880219028063, 44.829568788501, 45.7713894592745, 32.9500342231348, 
   41.2210814510609, 55.4168377823409, 47.9808350444901, 40.7912388774812, 56.974674880219, 68.4626967830253, 78.4394250513347, 
   39.8576317590691, 35.3100616016427, 31.4442162902122, 58.2642026009582, 51.4880219028063, 59.9698836413415, 74.5242984257358, 
   42.7871321013005, 34.8747433264887, 44.1396303901437, 46.3819301848049, 56.3093771389459, 70.9075975359343, 55.3949349760438, 
   45.0841889117043, 26.2778918548939, 50.4722792607803, 38.3983572895277, 47.419575633128, 38.3162217659138, 50.1081451060917, 
   35.088295687885, 32.5037645448323, 56.1533196440794, 46.154688569473, 65.8836413415469, 33.9438740588638, 62.861054072553, 
   48.5639972621492, 46.3490759753593, 38.8528405201916, 58.6475017111567, 48.9363449691992, 67.5728952772074, 65.9849418206708, 
   40.9007529089665, 50.2450376454483, 57.1964407939767, 60.5366187542779, 35.3511293634497, 31.3812457221081, 55.9863107460643, 
   52.72553045859, 38.0917180013689, 45.2101300479124, 37.7987679671458, 60.6598220396988, 35.5345653661875, 43.066392881588, 
   56.3915126625599, 30.5735797399042, 61.1827515400411, 58.299794661191, 62.3326488706366, 37.9986310746064, 33.1526351813826, 
   0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 4, 4, 3, 3, 3, 2, 4, 4, 4, 
   3, 3, 3, 4, 4, 3, 4, 4, 4, 4, 2, 2, 3, 4, 4, 2, 4, 2, 4, 3, 2, 3, 2, 4, 4, 4, 2, 3, 3, 3, 3, 4, 2, 1, 4, 3, 2, 3, 3, 3, 1, 
   4, 3, 3, 1, 3, 3, 3, 3, 4, 3, 1, 4, 4, 4, 3, 4, 3, 4, 4, 3, 4, 3, 4, 3, 3, 3, 2, 2, 4, 4, 2, 4, 3, 1, 2, 4, 3, 1, 4, 2, 3, 
   1, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 4, 4, 2, 3, 4, 3, 4, 2, 2, 2, 2, 3, 4, 3, 2, 2, 4, 3, 3, 2, 3, 4, 2, 3, 1, 
   3, 4, 2, 2, 2, 3, 3, 2, 4, 3, 4, 2, 4, 3, 3, 3, 2, 3, 2, 4, 3, 4, 2, 3, 3, 3, 3, 4, 3, 4, 4, 4, 2, 4, 4, 2, 2, 3, 3, 4, 2, 
   2, 3, 1, 4, 2, 2, 3, 3, 3, 3, 4, 3, 2, 4, 3, 4, 3, 2, 3, 2, 3, 4, 4, 4, 3, 4, 2, 3, 3, 3, 4, 3, 4, 3, 4, 3, 3, 4, 3, 3, 4, 
   4, 2, 4, 4, 3, 3, 3, 2, 1, 3, 4, 3, 4, 3, 4, 3, 4, 4, 2, 3, 3, 1, 3, 4, 2, 3, 4, 2, 3, 4, 4, 4, 3, 1, 3, 4, 2, 2, 3, 4, 3, 
   4, 4, 3, 4, 4, 3, 3, 4, 2, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 14.5, 1.1, 1.4, 1.8, 6.8, 2, 0.6, 3.2, 25.2, 2.8, 7.2, 1.4, 0.8, 
   1.4, 5.4, 11.4, 0.7, 10.2, 1.2, 3.4, 34.8, 2.1, 1.4, 10.4, 43.2, 34.4, 1.4, 7.2, 9.4, 3.6, 1.6, 0.8, 2.4, 0.6, 7.1, 6.6, 
   0.7, 1.1, 6.6, 5.7, 1, 3.8, 1.1, 1.6, 6, 1.3, 1.8, 2.2, 2.3, 0.8, 0.9, 1.2, 2.6, 45, 4.2, 1.2, 1.4, 2.2, 0.7, 20, 2.4, 1, 
   1.4, 8.4, 17.1, 12.2, 13.2, 6.3, 0.8, 14.4, 14.4, 4.5, 1.3, 0.8, 4.2, 5, 1.1, 1.2, 2, 1.6, 10, 1.4, 1.3, 3.2, 4, 1, 3.6, 
   4.6, 1.8, 0.9, 5, 1.1, 2.2, 1.2, 0.4, 1, 1.9, 5.5, 4, 6.7, 6.4, 1.4, 3, 6.5, 3.5, 0.6, 3.5, 2.6, 0.6, 0.6, 2.6, 1, 34.8, 
   5.6, 1.9, 3, 1.4, 0.4, 0.8, 1.1, 7.3, 2.2, 1.1, 0.9, 2, 5.8, 56, 1.4, 1.2, 14.4, 3, 0.9, 2.3, 0.5, 2.4, 1.2, 51, 1.2, 3.4, 
   5, 1.2, 4.6, 6.4, 0.3, 4, 11.4, 0.9, 2.6, 1.2, 2.6, 3, 1.6, 1.8, 3.6, 9.4, 1.4, 1, 22, 0.8, 2, 28, 0.7, 2.6, 49, 0.9, 21.6, 
   1.5, 3.7, 1.4, 0.6, 1.4, 2.1, 9.4, 1.2, 0.5, 1, 1.4, 0.6, 3.9, 1.4, 1.8, 2.4, 0.5, 1.8, 11.8, 22.8, 3.2, 3.8, 1.8, 9, 14.1, 
   1, 0.7, 1, 2.3, 1.4, 4.5, 6.6, 6.8, 0.4, 0.9, 1.8, 26, 1.5, 1.6, 0.8, 0.4, 8.8, 1.9, 16, 3.9, 1.2, 2.1, 6.1, 1.6, 1.3, 1.2, 
   0.5, 1.1, 7.1, 3.1, 1.4, 1.1, 0.5, 1.1, 6.2, 11.2, 5.6, 2.2, 6.8, 7, 0.5, 6.6, 6.4, 7.2, 1, 2, 0.5, 4.4, 2.2, 1, 2, 11.2, 
   1, 1.6, 17.9, 2.6, 2.2, 2.6, 0.8, 2, 6.4, 17.4, 4, 1.4, 3.2, 17.2, 17, 6.6, 2.4, 1.6, 1.2, 2.2, 2.4, 2, 0.7, 2, 0.5, 5.8, 
   1.2, 1.6, 0.4, 0.8, 1.7, 2, 12.8), .Dim = c(276L, 7L), .Dimnames = list(c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
   "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", 
   "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", 
   "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", 
   "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", 
   "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", 
   "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", 
   "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", 
   "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", 
   "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", 
   "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", 
   "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", 
   "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", 
   "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", "255", "256", 
   "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", "271", "272", "273", "274", 
   "275", "276"), c("(Intercept)", "trt", "bili", "age", "male", "stage", "trt:bili")), assign = 0:6), y = c(`1` = 1L, `2` = 1L, 
   `3` = 0L, `4` = 1L, `5` = 1L, `6` = 0L, `7` = 0L, `8` = 1L, `9` = 1L, `10` = 1L, `11` = 1L, `12` = 0L, `13` = 0L, `14` = 0L, 
   `15` = 0L, `16` = 1L, `17` = 0L, `18` = 0L, `19` = 1L, `20` = 1L, `21` = 1L, `22` = 0L, `23` = 0L, `24` = 1L, `25` = 1L, 
   `26` = 1L, `27` = 0L, `28` = 1L, `29` = 0L, `30` = 0L, `31` = 0L, `32` = 0L, `33` = 0L, `34` = 0L, `35` = 0L, `36` = 1L, 
   `37` = 0L, `38` = 0L, `39` = 1L, `40` = 0L, `41` = 0L, `42` = 0L, `43` = 0L, `44` = 0L, `45` = 0L, `46` = 1L, `47` = 0L, 
   `48` = 1L, `49` = 0L, `50` = 1L, `51` = 0L, `52` = 0L, `53` = 0L, `54` = 1L, `55` = 0L, `56` = 0L, `57` = 0L, `58` = 0L, 
   `59` = 0L, `60` = 1L, `61` = 0L, `62` = 0L, `63` = 0L, `64` = 1L, `65` = 1L, `66` = 1L, `67` = 1L, `68` = 0L, `69` = 0L, 
   `70` = 0L, `71` = 1L, `72` = 0L, `73` = 0L, `74` = 0L, `75` = 0L, `76` = 1L, `77` = 0L, `78` = 0L, `79` = 0L, `80` = 0L, 
   `81` = 1L, `82` = 0L, `83` = 0L, `84` = 1L, `85` = 0L, `86` = 0L, `87` = 0L, `88` = 0L, `89` = 0L, `90` = 0L, `91` = 1L, 
   `92` = 0L, `93` = 0L, `94` = 0L, `95` = 0L, `96` = 0L, `97` = 1L, `98` = 0L, `99` = 1L, `100` = 1L, `101` = 0L, `102` = 1L, 
   `103` = 1L, `104` = 1L, `105` = 0L, `106` = 1L, `107` = 0L, `108` = 0L, `109` = 0L, `110` = 0L, `111` = 0L, `112` = 0L, `113` = 1L, 
   `114` = 1L, `115` = 0L, `116` = 0L, `117` = 0L, `118` = 0L, `119` = 0L, `120` = 0L, `121` = 0L, `122` = 0L, `123` = 0L, `124` = 0L, 
   `125` = 0L, `126` = 0L, `127` = 0L, `128` = 1L, `129` = 0L, `130` = 0L, `131` = 1L, `132` = 0L, `133` = 0L, `134` = 0L, `135` = 1L, 
   `136` = 1L, `137` = 0L, `138` = 0L, `139` = 0L, `140` = 0L, `141` = 0L, `142` = 0L, `143` = 1L, `144` = 0L, `145` = 0L, `146` = 0L, 
   `147` = 0L, `148` = 0L, `149` = 0L, `150` = 1L, `151` = 1L, `152` = 0L, `153` = 0L, `154` = 0L, `155` = 0L, `156` = 1L, `157` = 0L, 
   `158` = 0L, `159` = 0L, `160` = 1L, `161` = 0L, `162` = 0L, `163` = 0L, `164` = 1L, `165` = 0L, `166` = 0L, `167` = 0L, `168` = 0L, 
   `169` = 1L, `170` = 0L, `171` = 1L, `172` = 0L, `173` = 1L, `174` = 0L, `175` = 0L, `176` = 0L, `177` = 0L, `178` = 0L, `179` = 0L, 
   `180` = 1L, `181` = 0L, `182` = 0L, `183` = 1L, `184` = 0L, `185` = 0L, `186` = 0L, `187` = 0L, `188` = 1L, `189` = 0L, `190` = 0L, 
   `191` = 0L, `192` = 0L, `193` = 0L, `194` = 0L, `195` = 0L, `196` = 0L, `197` = 0L, `198` = 1L, `199` = 1L, `200` = 0L, `201` = 1L, 
   `202` = 0L, `203` = 0L, `204` = 1L, `205` = 0L, `206` = 1L, `207` = 0L, `208` = 1L, `209` = 0L, `210` = 0L, `211` = 1L, `212` = 0L, 
   `213` = 0L, `214` = 0L, `215` = 0L, `216` = 1L, `217` = 0L, `218` = 0L, `219` = 1L, `220` = 1L, `221` = 1L, `222` = 1L, `223` = 0L, 
   `224` = 0L, `225` = 0L, `226` = 0L, `227` = 0L, `228` = 0L, `229` = 1L, `230` = 1L, `231` = 0L, `232` = 0L, `233` = 1L, `234` = 0L, 
   `235` = 0L, `236` = 1L, `237` = 0L, `238` = 0L, `239` = 1L, `240` = 0L, `241` = 0L, `242` = 0L, `243` = 0L, `244` = 0L, `245` = 0L, 
   `246` = 0L, `247` = 0L, `248` = 0L, `249` = 0L, `250` = 0L, `251` = 1L, `252` = 1L, `253` = 0L, `254` = 0L, `255` = 0L, `256` = 0L, 
   `257` = 0L, `258` = 1L, `259` = 0L, `260` = 0L, `261` = 0L, `262` = 0L, `263` = 0L, `264` = 0L, `265` = 0L, `266` = 0L, `267` = 1L, 
   `268` = 0L, `269` = 1L, `270` = 0L, `271` = 0L, `272` = 0L, `273` = 0L, `274` = 0L, `275` = 0L, `276` = 1L), weights = NULL, 
       start = NULL, etastart = NULL, mustart = NULL, offset = NULL, family = structure(list(family = "binomial", link = "log", 
           linkfun = function (mu) 
           log(mu), linkinv = function (eta) 
           pmax(exp(eta), .Machine$double.eps), variance = function (mu) 
           mu * (1 - mu), dev.resids = function (y, mu, wt) 
           .Call(C_binomial_dev_resids, y, mu, wt), aic = function (y, n, mu, wt, dev) 
           {
               m <- if (any(n > 1)) 
                   n
               else wt
               -2 * sum(ifelse(m > 0, (wt/m), 0) * dbinom(round(m * y), round(m), mu, log = TRUE))
           }, mu.eta = function (eta) 
           pmax(exp(eta), .Machine$double.eps), initialize = expression({
               if (NCOL(y) == 1) {
                   if (is.factor(y)) 
                     y <- y != levels(y)[1L]
                   n <- rep.int(1, nobs)
                   y[weights == 0] <- 0
                   if (any(y < 0 | y > 1)) 
                     stop("y values must be 0 <= y <= 1")
                   mustart <- (weights * y + 0.5)/(weights + 1)
                   m <- weights * y
                   if (any(abs(m - round(m)) > 0.001)) 
                     warning("non-integer #successes in a binomial glm!")
               }
               else if (NCOL(y) == 2) {
                   if (any(abs(y - round(y)) > 0.001)) 
                     warning("non-integer counts in a binomial glm!")
                   n <- y[, 1] + y[, 2]
                   y <- ifelse(n == 0, 0, y[, 1]/n)
                   weights <- weights * n
                   mustart <- (n * y + 0.5)/(n + 1)
               }
               else stop("for the 'binomial' family, y must be a vector of 0 and 1's\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures")
           }), validmu = function (mu) 
           all(is.finite(mu)) && all(mu > 0 & mu < 1), valideta = function (eta) 
           TRUE, simulate = function (object, nsim) 
           {
               ftd <- fitted(object)
               n <- length(ftd)
               ntot <- n * nsim
               wts <- object$prior.weights
               if (any(wts%%1 != 0)) 
                   stop("cannot simulate from non-integer prior.weights")
               if (!is.null(m <- object$model)) {
                   y <- model.response(m)
                   if (is.factor(y)) {
                     yy <- factor(1 + rbinom(ntot, size = 1, prob = ftd), labels = levels(y))
                     split(yy, rep(seq_len(nsim), each = n))
                   }
                   else if (is.matrix(y) && ncol(y) == 2) {
                     yy <- vector("list", nsim)
                     for (i in seq_len(nsim)) {
                       Y <- rbinom(n, size = wts, prob = ftd)
                       YY <- cbind(Y, wts - Y)
                       colnames(YY) <- colnames(y)
                       yy[[i]] <- YY
                     }
                     yy
                   }
                   else rbinom(ntot, size = wts, prob = ftd)/wts
               }
               else rbinom(ntot, size = wts, prob = ftd)/wts
           }), class = "family"), control = list(epsilon = 0.00000001, maxit = 25, trace = FALSE), intercept = TRUE, singular.ok = TRUE)
8: stop("no valid set of coefficients has been found: please supply starting values", call. = FALSE)

test-06_calc_myreg_helpers_vcov.R:290: error: Sigma_theta_hat for yreg poisson: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:290
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:350: error: Sigma_theta_hat for yreg negbin: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:350
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:408: error: Sigma_theta_hat for yreg survCox: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:408
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:434: error: Sigma_theta_hat for yreg survCox: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "survCox", yreg_fit = yreg_fit3, avar = "trt", mvar = "bili", cvar = c("age", "male", 
       "stage"), interaction = TRUE), vcov(yreg_fit3)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:434
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:466: error: Sigma_theta_hat for yreg survAFT_exp: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:466
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:492: error: Sigma_theta_hat for yreg survAFT_exp: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_exp", yreg_fit = yreg_fit3, avar = "trt", mvar = "bili", cvar = c("age", "male", 
       "stage"), interaction = TRUE), vcov(yreg_fit3)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:492
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:524: error: Sigma_theta_hat for yreg survAFT_weibull: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:524
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:550: error: Sigma_theta_hat for yreg survAFT_weibull: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_weibull", yreg_fit = yreg_fit3, avar = "trt", mvar = "bili", cvar = c("age", 
       "male", "stage"), interaction = TRUE), vcov(yreg_fit3)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:550
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_linear_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_linear_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_linear.R:17: skip: calc_myreg_mreg_linear_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_linear_yreg_linear.R:26: skip: calc_myreg_mreg_linear_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠹ |   0 1   2 | 07_calc_myreg_mreg_linear_yreg_linear✖ |   0 1   2 | 07_calc_myreg_mreg_linear_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_logistic.R:18: error: (unknown)
!is.null(cvar) is not TRUE
1: describe("calc_myreg_mreg_linear_yreg_logistic", {
       data(pbc)
       pbc_cc <- pbc[complete.cases(pbc), ] %>% mutate(male = if_else(sex == "m", 1L, 0L), status = if_else(status == 0, 0L, 
           1L))
       describe("calc_myreg_mreg_linear_yreg_logistic(cvar = NULL)", {
           mreg_fit <- fit_mreg(mreg = "linear", data = pbc_cc, avar = "trt", mvar = "bili", cvar = NULL)
           yreg_fit <- fit_yreg(yreg = "logistic", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = NULL, 
               interaction = FALSE, eventvar = NULL)
           myreg_funs <- calc_myreg_mreg_linear_yreg_logistic(mreg = "linear", mreg_fit = mreg_fit, yreg = "logistic", yreg_fit = yreg_fit, 
               avar = "trt", mvar = "bili", cvar = NULL, interaction = FALSE)
           it("returns a list of two functions", {
               expect_equal(class(myreg_funs), "list")
               expect_equal(length(myreg_funs), 2)
           })
           it("returns functions that take 4 arguments", {
               expect_equal(formals(myreg_funs[[1]]), c("a0", "a1", "m_cde", "c_cond"))
               expect_equal(formals(myreg_funs[[2]]), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns a function that return named vector of effect estimates", {
               expect(names(myreg_funs[[1]](1, 2, 3, 4)), c("cde", "pnde", "tnie", "tnde", "pnie", "te", "pm"))
               expect(names(myreg_funs[[2]](1, 2, 3, 4)), c("se_cde", "se_pnde", "se_tnie", "se_tnde", "se_pnie", "se_te", "se_pm"))
           })
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:18
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: describe("calc_myreg_mreg_linear_yreg_logistic(cvar = NULL)", {
       mreg_fit <- fit_mreg(mreg = "linear", data = pbc_cc, avar = "trt", mvar = "bili", cvar = NULL)
       yreg_fit <- fit_yreg(yreg = "logistic", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = NULL, interaction = FALSE, 
           eventvar = NULL)
       myreg_funs <- calc_myreg_mreg_linear_yreg_logistic(mreg = "linear", mreg_fit = mreg_fit, yreg = "logistic", yreg_fit = yreg_fit, 
           avar = "trt", mvar = "bili", cvar = NULL, interaction = FALSE)
       it("returns a list of two functions", {
           expect_equal(class(myreg_funs), "list")
           expect_equal(length(myreg_funs), 2)
       })
       it("returns functions that take 4 arguments", {
           expect_equal(formals(myreg_funs[[1]]), c("a0", "a1", "m_cde", "c_cond"))
           expect_equal(formals(myreg_funs[[2]]), c("a0", "a1", "m_cde", "c_cond"))
       })
       it("returns a function that return named vector of effect estimates", {
           expect(names(myreg_funs[[1]](1, 2, 3, 4)), c("cde", "pnde", "tnie", "tnde", "pnie", "te", "pm"))
           expect(names(myreg_funs[[2]](1, 2, 3, 4)), c("se_cde", "se_pnde", "se_tnie", "se_tnde", "se_pnie", "se_te", "se_pm"))
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:27
5: eval(substitute(code), describe_environment)
6: eval(substitute(code), describe_environment)
7: calc_myreg_mreg_linear_yreg_logistic(mreg = "linear", mreg_fit = mreg_fit, yreg = "logistic", yreg_fit = yreg_fit, avar = "trt", 
       mvar = "bili", cvar = NULL, interaction = FALSE) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:41
8: assertthat::assert_that(!is.null(cvar)) at /inv/kyoshida/cantos_stats/regmedint/R/07_calc_myreg_mreg_linear_yreg_logistic.R:29
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_linear.R:17: skip: calc_myreg_mreg_logistic_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_linear.R:26: skip: calc_myreg_mreg_logistic_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_logistic✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_logistic
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_logistic.R:17: skip: calc_myreg_mreg_logistic_yreg_logistic_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_logistic.R:26: skip: calc_myreg_mreg_logistic_yreg_logistic_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | calc_myreg_mreg_linear_yreg_survAFT_weibull✖ |   0 4     | calc_myreg_mreg_linear_yreg_survAFT_weibull
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-calc_myreg_mreg_linear_yreg_survAFT_weibull.R:42: error: calc_myreg fit linear / Weibull AFT models correctly
!is.null(cvar) is not TRUE
1: calc_myreg(mreg = "linear", mreg_fit = mreg_fit0, yreg = "survAFT_weibull", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", 
       cvar = NULL, interaction = FALSE) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-calc_myreg_mreg_linear_yreg_survAFT_weibull.R:42
2: assertthat::assert_that(!is.null(cvar)) at /inv/kyoshida/cantos_stats/regmedint/R/05_calc_myreg_mediation_analysis.R:28

test-calc_myreg_mreg_linear_yreg_survAFT_weibull.R:181: failure: calc_myreg fit linear / Weibull AFT models correctly with interaction
TRUE not equal to FALSE.
1 element mismatch

test-calc_myreg_mreg_linear_yreg_survAFT_weibull.R:193: failure: calc_myreg fit linear / Weibull AFT models correctly with interaction
TRUE not equal to FALSE.
1 element mismatch

test-calc_myreg_mreg_linear_yreg_survAFT_weibull.R:205: failure: calc_myreg fit linear / Weibull AFT models correctly with interaction
TRUE not equal to FALSE.
1 element mismatch
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠼ |   0 5     | calc_myreg_mreg_linear_yreg_survAFT_weibull✖ |   0 5     | calc_myreg_mreg_linear_yreg_survAFT_weibull
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-regmedint_mreg_linear_yreg_aft_weibull.R:45: error: (unknown)
Unimplemented!
Need to validate arguments before passing to other functions!
1: regmedint(data = data1, yvar = "y", avar = "x", mvar = "m", cvar = "c", a0 = 0, a1 = 1, m_cde = 0, yreg = "survAFT_weibull", 
       mreg = "logistic", interaction = TRUE, casecontrol = FALSE, full_output = FALSE, c_cond = NULL, boot = FALSE, eventvar = "cens") at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-regmedint_mreg_linear_yreg_aft_weibull.R:45
2: validate_args(data, yvar, avar, mvar, cvar, a0, a1, m_cde, yreg, mreg, interaction, casecontrol, full_output, c_cond, boot, 
       eventvar) at /inv/kyoshida/cantos_stats/regmedint/R/01_regmedint_class_ui.R:67
3: stop("Unimplemented!\nNeed to validate arguments before passing to other functions!") at /inv/kyoshida/cantos_stats/regmedint/R/01_regmedint_class_ui.R:141
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

══ Results ═════════════════════════════════════════════════════════════════════════════════════════════════════════════
Duration: 2.2 s

OK:       208
Failed:   28
Warnings: 0
Skipped:  6
