✔ |  OK F W S | Context
⠏ |   0       | 03_fit_mreg✔ |  24       | 03_fit_mreg
⠏ |   0       | 03_helpers_fit_mreg_fit_yreg✔ |  23       | 03_helpers_fit_mreg_fit_yreg
⠏ |   0       | 04_fit_yreg_linear✔ |  24       | 04_fit_yreg_linear
⠏ |   0       | 04_fit_yreg_logistic✔ |  24       | 04_fit_yreg_logistic
⠏ |   0       | 04_fit_yreg_poisson✔ |  24       | 04_fit_yreg_poisson
⠏ |   0       | 04_fit_yreg_survAFT_exp✔ |  24       | 04_fit_yreg_survAFT_exp
⠏ |   0       | 04_fit_yreg_survAFT_weibull✔ |  24       | 04_fit_yreg_survAFT_weibull
⠏ |   0       | 06_calc_myreg_helpers_coef⠧ |  38       | 06_calc_myreg_helpers_coef⠸ |  84       | 06_calc_myreg_helpers_coef✖ | 106 3     | 06_calc_myreg_helpers_coef [0.3 s]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-06_calc_myreg_helpers_coef.R:1420: failure: theta_hat (3 cvar) for yreg survCox: extracts coef correctly when there is an interaction (Add zero for Intercept)
theta_hat(...) not equal to `ref_coef`.
Lengths differ: 7 is not 8

test-06_calc_myreg_helpers_coef.R:1516: failure: theta_hat (3 cvar) for yreg survAFT_weibull: extracts coef correctly when there is no interaction (add zero)
`%>%`(...) not equal to length(coef(yreg_fit3)) + 2.
1/1 mismatches
[1] 7 - 8 == -1

test-06_calc_myreg_helpers_coef.R:1541: failure: theta_hat (3 cvar) for yreg survAFT_weibull: extracts coef correctly when there is an interaction
`%>%`(...) not equal to length(coef(yreg_fit3)) + 1.
1/1 mismatches
[1] 7 - 8 == -1
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 06_calc_myreg_helpers_vcov⠸ |  14 10     | 06_calc_myreg_helpers_vcov⠇ |  24 25     | 06_calc_myreg_helpers_vcov✖ |  34 38     | 06_calc_myreg_helpers_vcov [0.3 s]
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-06_calc_myreg_helpers_vcov.R:181: error: Sigma_theta_hat (NULL cvar) for yreg linear: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:181
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:207: error: Sigma_theta_hat (NULL cvar) for yreg linear: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "linear", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:207
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:238: error: Sigma_theta_hat (NULL cvar) for yreg logistic: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:238
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:264: error: Sigma_theta_hat (NULL cvar) for yreg logistic: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "logistic", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:264
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:295: error: Sigma_theta_hat (NULL cvar) for yreg loglinear: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:295
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:321: error: Sigma_theta_hat (NULL cvar) for yreg loglinear: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "poisson", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:321
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:353: error: Sigma_theta_hat (NULL cvar) for yreg poisson: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:353
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:380: error: Sigma_theta_hat (NULL cvar) for yreg poisson: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "poisson", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:380
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:412: error: Sigma_theta_hat (NULL cvar) for yreg negbin: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:412
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:438: error: Sigma_theta_hat (NULL cvar) for yreg negbin: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "negbin", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:438
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:469: error: Sigma_theta_hat (NULL cvar) for yreg survCox: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:469
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:495: error: Sigma_theta_hat (NULL cvar) for yreg survCox: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "survCox", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:495
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:526: error: Sigma_theta_hat (NULL cvar) for yreg survAFT_exp: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:526
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:552: error: Sigma_theta_hat (NULL cvar) for yreg survAFT_exp: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_exp", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:552
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:583: error: Sigma_theta_hat (NULL cvar) for yreg survAFT_weibull: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:583
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:609: error: Sigma_theta_hat (NULL cvar) for yreg survAFT_weibull: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_weibull", yreg_fit = yreg_fit0, avar = "trt", mvar = "bili", cvar = NULL, interaction = TRUE), 
       vcov(yreg_fit0)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:609
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:645: error: Sigma_theta_hat (1 cvar) for yreg linear: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:645
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:703: error: Sigma_theta_hat (1 cvar) for yreg logistic: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:703
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:761: error: Sigma_theta_hat (1 cvar) for yreg loglinear: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:761
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:820: error: Sigma_theta_hat (1 cvar) for yreg poisson: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:820
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:880: error: Sigma_theta_hat (1 cvar) for yreg negbin: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:880
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:938: error: Sigma_theta_hat (1 cvar) for yreg survCox: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:938
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:964: error: Sigma_theta_hat (1 cvar) for yreg survCox: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "survCox", yreg_fit = yreg_fit1, avar = "trt", mvar = "bili", cvar = c("age"), interaction = TRUE), 
       vcov(yreg_fit1)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:964
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:996: error: Sigma_theta_hat (1 cvar) for yreg survAFT_exp: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:996
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1022: error: Sigma_theta_hat (1 cvar) for yreg survAFT_exp: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_exp", yreg_fit = yreg_fit1, avar = "trt", mvar = "bili", cvar = c("age"), interaction = TRUE), 
       vcov(yreg_fit1)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1022
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:1054: error: Sigma_theta_hat (1 cvar) for yreg survAFT_weibull: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1054
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age"), c("(Intercept)", "trt", "bili", "trt:bili", 
   "age")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1080: error: Sigma_theta_hat (1 cvar) for yreg survAFT_weibull: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_weibull", yreg_fit = yreg_fit1, avar = "trt", mvar = "bili", cvar = c("age"), 
       interaction = TRUE), vcov(yreg_fit1)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1080
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:1116: error: Sigma_theta_hat (3 cvar) for yreg linear: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1116
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1174: error: Sigma_theta_hat (3 cvar) for yreg logistic: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1174
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1232: error: Sigma_theta_hat (3 cvar) for yreg loglinear: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1232
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1291: error: Sigma_theta_hat (3 cvar) for yreg poisson: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1291
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1351: error: Sigma_theta_hat (3 cvar) for yreg negbin: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1351
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1409: error: Sigma_theta_hat (3 cvar) for yreg survCox: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1409
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1435: error: Sigma_theta_hat (3 cvar) for yreg survCox: extracts vcov correctly when there is an interaction
subscript out of bounds
1: expect_equal(Sigma_theta_hat(yreg = "survCox", yreg_fit = yreg_fit3, avar = "trt", mvar = "bili", cvar = c("age", "male", 
       "stage"), interaction = TRUE), vcov(yreg_fit3)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1435
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:1467: error: Sigma_theta_hat (3 cvar) for yreg survAFT_exp: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1467
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1493: error: Sigma_theta_hat (3 cvar) for yreg survAFT_exp: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_exp", yreg_fit = yreg_fit3, avar = "trt", mvar = "bili", cvar = c("age", "male", 
       "stage"), interaction = TRUE), vcov(yreg_fit3)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1493
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))

test-06_calc_myreg_helpers_vcov.R:1525: error: Sigma_theta_hat (3 cvar) for yreg survAFT_weibull: extracts vcov correctly when there is no interaction
invalid dimnames given for "dgCMatrix" object
1: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage"))) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1525
2: `dimnames<-`(`*tmp*`, value = list(c("(Intercept)", "trt", "bili", "trt:bili", "age", "male", "stage"), c("(Intercept)", 
   "trt", "bili", "trt:bili", "age", "male", "stage")))
3: dimnamesGets(x, value)
4: stop(gettextf("invalid dimnames given for %s object", dQuote(class(x))), domain = NA)

test-06_calc_myreg_helpers_vcov.R:1551: error: Sigma_theta_hat (3 cvar) for yreg survAFT_weibull: extracts vcov correctly when there is an interaction
no 'dimnames' attribute for array
1: expect_equal(Sigma_theta_hat(yreg = "survAFT_weibull", yreg_fit = yreg_fit3, avar = "trt", mvar = "bili", cvar = c("age", 
       "male", "stage"), interaction = TRUE), vcov(yreg_fit3)[vars, vars]) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-06_calc_myreg_helpers_vcov.R:1551
2: quasi_label(enquo(expected), expected.label, arg = "expected")
3: eval_bare(get_expr(quo), get_env(quo))
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_linear_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_linear_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_linear.R:17: skip: calc_myreg_mreg_linear_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_linear_yreg_linear.R:26: skip: calc_myreg_mreg_linear_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠹ |   0 1   2 | 07_calc_myreg_mreg_linear_yreg_linear✖ |   0 1   2 | 07_calc_myreg_mreg_linear_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_linear_yreg_logistic.R:18: error: (unknown)
object 'Sigma_beta' not found
1: describe("calc_myreg_mreg_linear_yreg_logistic", {
       data(pbc)
       pbc_cc <- pbc[complete.cases(pbc), ] %>% mutate(male = if_else(sex == "m", 1L, 0L), status = if_else(status == 0, 0L, 
           1L))
       describe("calc_myreg_mreg_linear_yreg_logistic(cvar = NULL)", {
           mreg_fit <- fit_mreg(mreg = "linear", data = pbc_cc, avar = "trt", mvar = "bili", cvar = NULL)
           yreg_fit <- fit_yreg(yreg = "logistic", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = NULL, 
               interaction = FALSE, eventvar = NULL)
           myreg_funs <- calc_myreg_mreg_linear_yreg_logistic(mreg = "linear", mreg_fit = mreg_fit, yreg = "logistic", yreg_fit = yreg_fit, 
               avar = "trt", mvar = "bili", cvar = NULL, interaction = FALSE)
           it("returns a list of two functions", {
               expect_equal(class(myreg_funs), "list")
               expect_equal(length(myreg_funs), 2)
           })
           it("returns functions that take 4 arguments", {
               expect_equal(formals(myreg_funs[[1]]), c("a0", "a1", "m_cde", "c_cond"))
               expect_equal(formals(myreg_funs[[2]]), c("a0", "a1", "m_cde", "c_cond"))
           })
           it("returns functions that return named vector of effect estimates", {
               expect(names(myreg_funs[[1]](1, 2, 3, NULL)), c("cde", "pnde", "tnie", "tnde", "pnie", "te", "pm"))
               expect(names(myreg_funs[[2]](1, 2, 3, NULL)), c("se_cde", "se_pnde", "se_tnie", "se_tnde", "se_pnie", "se_te", 
                   "se_pm"))
           })
           it("returns functions that error on inconsistent c_cond", {
               expect_error(myreg_funs[[1]](1, 2, 3, 4))
               expect_error(myreg_funs[[2]](1, 2, 3, 4))
           })
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:18
2: eval(substitute(code), describe_environment)
3: eval(substitute(code), describe_environment)
4: describe("calc_myreg_mreg_linear_yreg_logistic(cvar = NULL)", {
       mreg_fit <- fit_mreg(mreg = "linear", data = pbc_cc, avar = "trt", mvar = "bili", cvar = NULL)
       yreg_fit <- fit_yreg(yreg = "logistic", data = pbc_cc, yvar = "spiders", avar = "trt", mvar = "bili", cvar = NULL, interaction = FALSE, 
           eventvar = NULL)
       myreg_funs <- calc_myreg_mreg_linear_yreg_logistic(mreg = "linear", mreg_fit = mreg_fit, yreg = "logistic", yreg_fit = yreg_fit, 
           avar = "trt", mvar = "bili", cvar = NULL, interaction = FALSE)
       it("returns a list of two functions", {
           expect_equal(class(myreg_funs), "list")
           expect_equal(length(myreg_funs), 2)
       })
       it("returns functions that take 4 arguments", {
           expect_equal(formals(myreg_funs[[1]]), c("a0", "a1", "m_cde", "c_cond"))
           expect_equal(formals(myreg_funs[[2]]), c("a0", "a1", "m_cde", "c_cond"))
       })
       it("returns functions that return named vector of effect estimates", {
           expect(names(myreg_funs[[1]](1, 2, 3, NULL)), c("cde", "pnde", "tnie", "tnde", "pnie", "te", "pm"))
           expect(names(myreg_funs[[2]](1, 2, 3, NULL)), c("se_cde", "se_pnde", "se_tnie", "se_tnde", "se_pnie", "se_te", "se_pm"))
       })
       it("returns functions that error on inconsistent c_cond", {
           expect_error(myreg_funs[[1]](1, 2, 3, 4))
           expect_error(myreg_funs[[2]](1, 2, 3, 4))
       })
   }) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:27
5: eval(substitute(code), describe_environment)
6: eval(substitute(code), describe_environment)
7: calc_myreg_mreg_linear_yreg_logistic(mreg = "linear", mreg_fit = mreg_fit, yreg = "logistic", yreg_fit = yreg_fit, avar = "trt", 
       mvar = "bili", cvar = NULL, interaction = FALSE) at /inv/kyoshida/cantos_stats/regmedint/tests/testthat/test-07_calc_myreg_mreg_linear_yreg_logistic.R:41
8: calc_myreg_mreg_linear_yreg_logistic_se(beta0 = beta0, beta1 = beta1, beta2 = beta2, theta1 = theta1, theta2 = theta2, theta3 = theta3, 
       theta4 = theta4, sigma_sq = sigma_sq, Sigma_beta = Sigma_beta, Sigma_theta = Sigma_theta, Sigma_sigma = Sigma_sigma) at /inv/kyoshida/cantos_stats/regmedint/R/07_calc_myreg_mreg_linear_yreg_logistic.R:85
9: Matrix::bdiag(Sigma_beta, Sigma_theta, Sigma_sigma) at /inv/kyoshida/cantos_stats/regmedint/R/07_calc_myreg_mreg_linear_yreg_logistic.R:188
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_linear✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_linear
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_linear.R:17: skip: calc_myreg_mreg_logistic_yreg_linear_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_linear.R:26: skip: calc_myreg_mreg_logistic_yreg_linear_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
⠏ |   0       | 07_calc_myreg_mreg_logistic_yreg_logistic✔ |   0     2 | 07_calc_myreg_mreg_logistic_yreg_logistic
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test-07_calc_myreg_mreg_logistic_yreg_logistic.R:17: skip: calc_myreg_mreg_logistic_yreg_logistic_est works given coef
Empty test

test-07_calc_myreg_mreg_logistic_yreg_logistic.R:26: skip: calc_myreg_mreg_logistic_yreg_logistic_se works given coef and vcov
Empty test
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

══ Results ═════════════════════════════════════════════════════════════════════════════════════════════════════════════
Duration: 2.4 s

OK:       307
Failed:   42
Warnings: 0
Skipped:  6
